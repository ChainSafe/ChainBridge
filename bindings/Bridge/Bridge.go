// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeDepositProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeDepositProposal struct {
	DataHash [32]byte
	YesVotes []common.Address
	NoVotes  []common.Address
	Status   uint8
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"relayerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"DepositProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"DepositProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"RelayerThresholdProposalVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposedValue\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositProposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnDepositProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerContract\",\"outputs\":[{\"internalType\":\"contractIRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDepositProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"getDepositProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"internalType\":\"structBridge.DepositProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"createRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b5060405162003026380380620030268339818101604052810190620000379190620000e7565b826000806101000a81548160ff021916908360ff16021790555081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600181905550505050620001d6565b600081519050620000b38162000188565b92915050565b600081519050620000ca81620001a2565b92915050565b600081519050620000e181620001bc565b92915050565b600080600060608486031215620000fd57600080fd5b60006200010d86828701620000d0565b93505060206200012086828701620000a2565b92505060406200013386828701620000b9565b9150509250925092565b60006200014a8262000151565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b62000193816200013d565b81146200019f57600080fd5b50565b620001ad8162000171565b8114620001b957600080fd5b50565b620001c7816200017b565b8114620001d357600080fd5b50565b612e4080620001e66000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063beab713111610097578063e9cdaead11610066578063e9cdaead146102c5578063ea059625146102e1578063faa9bce9146102ff578063fe6121361461031b57610100565b8063beab71311461023d578063cb4815e01461025b578063d7a9cd791461028b578063df269060146102a957610100565b8063941861b5116100d3578063941861b514610190578063a9b0b0fe146101c0578063b06e1cc3146101dc578063ba3915731461020d57610100565b8063030e7ddd1461010557806306899ca4146101215780635f31b69c1461013f578063613d880714610160575b600080fd5b61011f600480360381019061011a9190611f86565b61033a565b005b610129610583565b60405161013691906129b4565b60405180910390f35b610147610589565b60405161015794939291906129cf565b60405180910390f35b61017a60048036038101906101759190611efb565b6106d0565b604051610187919061277b565b60405180910390f35b6101aa60048036038101906101a59190611f37565b61078d565b6040516101b7919061271c565b60405180910390f35b6101da60048036038101906101d59190612001565b6107c9565b005b6101f660048036038101906101f19190611efb565b610db8565b604051610204929190612752565b60405180910390f35b61022760048036038101906102229190611e42565b610df6565b60405161023491906129b4565b60405180910390f35b610245610e0e565b6040516102529190612a97565b60405180910390f35b61027560048036038101906102709190611efb565b610e20565b6040516102829190612992565b60405180910390f35b610293610fb2565b6040516102a091906129b4565b60405180910390f35b6102c360048036038101906102be9190611e42565b610fb8565b005b6102df60048036038101906102da9190611e19565b611444565b005b6102e961196d565b6040516102f691906127bf565b60405180910390f35b61031960048036038101906103149190611e94565b611993565b005b610323611ab2565b604051610331929190612a22565b60405180910390f35b6000600a6000868152602001908152602001600020600085815260200190815260200160002090506000600381111561036f57fe5b8160030160009054906101000a900460ff16600381111561038c57fe5b14156103cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c490612832565b60405180910390fd5b600260038111156103da57fe5b8160030160009054906101000a900460ff1660038111156103f757fe5b14610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e90612912565b60405180910390fd5b8060000154838360405160200161044f9291906126d9565b60405160208183030381529060405280519060200120146104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906128b2565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b81526004016104e3919061279d565b600060405180830381600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b5050505060038260030160006101000a81548160ff0219169083600381111561053657fe5b0217905550846000809054906101000a900460ff1660ff16877f4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d0760405160405180910390a4505050505050565b60075481565b60006060806000600260000154600280016002600301600260040160009054906101000a900460ff168280548060200260200160405190810160405280929190818152602001828054801561063357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105e9575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156106bb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610671575b50505050509150935093509350935090919293565b6009602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081565b600b602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016108289190612701565b602060405180830381600087803b15801561084257600080fd5b505af1158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611df0565b6108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090612932565b60405180910390fd5b6000600a60008681526020019081526020016000206000858152602001908152602001600020905060018160030160009054906101000a900460ff16600381111561090057fe5b1115610941576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610938906128f2565b60405180910390fd5b600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e790612852565b60405180910390fd5b60008160030160009054906101000a900460ff166003811115610a0f57fe5b1415610bef576007600081546001019190508190555060405180608001604052808481526020016001604051908082528060200260200182016040528015610a665781602001602082028036833780820191505090505b5081526020016000604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b50815260200160016003811115610aaf57fe5b815250600a60008781526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001019080519060200190610afc929190611b76565b506040820151816002019080519060200190610b19929190611b76565b5060608201518160030160006101000a81548160ff02191690836003811115610b3e57fe5b02179055509050503381600101600081548110610b5757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000809054906101000a900460ff1660ff16867f376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c986604051610be29190612737565b60405180910390a4610c55565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600b6000878152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550836000809054906101000a900460ff1660ff16867f5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b8908460030160009054906101000a900460ff16604051610d2391906127da565b60405180910390a460018054111580610d455750600154816001018054905010155b15610db15760028160030160006101000a81548160ff02191690836003811115610d6b57fe5b0217905550836000809054906101000a900460ff1660ff16867fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a45b5050505050565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60086020528060005260406000206000915090505481565b6000809054906101000a900460ff1681565b610e28611c00565b600a600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ee657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e9c575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f7457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f2a575b505050505081526020016003820160009054906101000a900460ff166003811115610f9b57fe5b6003811115610fa657fe5b81525050905092915050565b60015481565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016110179190612701565b602060405180830381600087803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110699190611df0565b6110a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109f90612932565b60405180910390fd5b600060018111156110b557fe5b600260040160009054906101000a900460ff1660018111156110d357fe5b14611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a90612952565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190611e6b565b8211156111f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ee90612872565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156112385781602001602082028036833780820191505090505b508152602001600060405190808252806020026020018201604052801561126e5781602001602082028036833780820191505090505b50815260200160018081111561128057fe5b81525060026000820151816000015560208201518160020190805190602001906112ab929190611b76565b5060408201518160030190805190602001906112c8929190611b76565b5060608201518160040160006101000a81548160ff021916908360018111156112ed57fe5b0217905550905050600180541161135f576002600001546001819055506000600260040160006101000a81548160ff0219169083600181111561132c57fe5b0217905550817fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a25b336002800160008154811061137057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550817f79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d60405160405180910390a25050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016114a39190612701565b602060405180830381600087803b1580156114bd57600080fd5b505af11580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190611df0565b611534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152b90612932565b60405180910390fd5b60018081111561154057fe5b600260040160009054906101000a900460ff16600181111561155e57fe5b1461159e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611595906128d2565b60405180910390fd5b600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561162e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162590612892565b60405180910390fd5b600182600181111561163c57fe5b60ff161115611680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167790612972565b60405180910390fd5b60018081111561168c57fe5b82600181111561169857fe5b14156117085760028001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061176f565b6002600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1826040516117f991906127f5565b60405180910390a160015460028001805490501061187b576002600001546001819055506000600260040160006101000a81548160ff0219169083600181111561183f57fe5b02179055506002600001547fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a2611969565b60015461193a600260030180549050600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192c9190611e6b565b611ad190919063ffffffff16565b1015611968576000600260040160006101000a81548160ff0219169083600181111561196257fe5b02179055505b5b5050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860008581526020019081526020016000206000815460010191905081905590508160096000868152602001908152602001600020600083815260200190815260200160002090805190602001906119ef929190611c36565b5060008390508073ffffffffffffffffffffffffffffffffffffffff1663cb65d221868433876040518563ffffffff1660e01b8152600401611a349493929190612a4b565b600060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b50505050818473ffffffffffffffffffffffffffffffffffffffff16867feaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b960405160405180910390a45050505050565b60028060000154908060040160009054906101000a900460ff16905082565b6000611b1383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611b1b565b905092915050565b6000838311158290611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a9190612810565b60405180910390fd5b5060008385039050809150509392505050565b828054828255906000526020600020908101928215611bef579160200282015b82811115611bee5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b96565b5b509050611bfc9190611cb6565b5090565b604051806080016040528060008019168152602001606081526020016060815260200160006003811115611c3057fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c7757805160ff1916838001178555611ca5565b82800160010185558215611ca5579182015b82811115611ca4578251825591602001919060010190611c89565b5b509050611cb29190611cf9565b5090565b611cf691905b80821115611cf257600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611cbc565b5090565b90565b611d1b91905b80821115611d17576000816000905550600101611cff565b5090565b90565b600081359050611d2d81612d9e565b92915050565b600081519050611d4281612db5565b92915050565b600081359050611d5781612dcc565b92915050565b600082601f830112611d6e57600080fd5b8135611d81611d7c82612adf565b612ab2565b91508082526020830160208301858383011115611d9d57600080fd5b611da8838284612cf3565b50505092915050565b600081359050611dc081612de3565b92915050565b600081359050611dd581612df3565b92915050565b600081519050611dea81612df3565b92915050565b600060208284031215611e0257600080fd5b6000611e1084828501611d33565b91505092915050565b600060208284031215611e2b57600080fd5b6000611e3984828501611db1565b91505092915050565b600060208284031215611e5457600080fd5b6000611e6284828501611dc6565b91505092915050565b600060208284031215611e7d57600080fd5b6000611e8b84828501611ddb565b91505092915050565b600080600060608486031215611ea957600080fd5b6000611eb786828701611dc6565b9350506020611ec886828701611d1e565b925050604084013567ffffffffffffffff811115611ee557600080fd5b611ef186828701611d5d565b9150509250925092565b60008060408385031215611f0e57600080fd5b6000611f1c85828601611dc6565b9250506020611f2d85828601611dc6565b9150509250929050565b600080600060608486031215611f4c57600080fd5b6000611f5a86828701611dc6565b9350506020611f6b86828701611dc6565b9250506040611f7c86828701611d1e565b9150509250925092565b60008060008060808587031215611f9c57600080fd5b6000611faa87828801611dc6565b9450506020611fbb87828801611dc6565b9350506040611fcc87828801611d1e565b925050606085013567ffffffffffffffff811115611fe957600080fd5b611ff587828801611d5d565b91505092959194509250565b60008060006060848603121561201657600080fd5b600061202486828701611dc6565b935050602061203586828701611dc6565b925050604061204686828701611d48565b9150509250925092565b600061205c8383612077565b60208301905092915050565b61207181612c63565b82525050565b61208081612bcb565b82525050565b61209761209282612bcb565b612d35565b82525050565b60006120a882612b36565b6120b28185612b8d565b93506120bd83612b1b565b8060005b838110156120ee5781516120d58882612050565b97506120e083612b6f565b9250506001810190506120c1565b5085935050505092915050565b600061210682612b2b565b6121108185612b7c565b935061211b83612b0b565b8060005b8381101561214c5781516121338882612050565b975061213e83612b62565b92505060018101905061211f565b5085935050505092915050565b61216281612bdd565b82525050565b61217181612be9565b82525050565b61218081612be9565b82525050565b600061219182612b4c565b61219b8185612b9e565b93506121ab818560208601612d02565b6121b481612d59565b840191505092915050565b60006121ca82612b4c565b6121d48185612baf565b93506121e4818560208601612d02565b80840191505092915050565b60006121fb82612b41565b6122058185612b9e565b9350612215818560208601612d02565b61221e81612d59565b840191505092915050565b61223281612c75565b82525050565b61224181612c99565b82525050565b61225081612c99565b82525050565b61225f81612cab565b82525050565b61226e81612cbd565b82525050565b600061227f82612b57565b6122898185612bba565b9350612299818560208601612d02565b6122a281612d59565b840191505092915050565b60006122ba601683612bba565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b60006122fa602583612bba565b91507f72656c617965722068617320616c726561647920766f746564206f6e2070726f60008301527f706f73616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612360604283612bba565b91507f70726f706f7365642076616c75652063616e6e6f74206265206772656174657260008301527f207468616e2074686520746f74616c206e756d626572206f662072656c61796560208301527f72730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006123ec601983612bba565b91507f72656c617965722068617320616c726561647920766f746564000000000000006000830152602082019050919050565b600061242c603183612bba565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b6000612492601f83612bba565b91507f6e6f2070726f706f73616c2069732063757272656e746c7920616374697665006000830152602082019050919050565b60006124d2602f83612bba565b91507f70726f706f73616c2068617320616c7265616479206265656e2070617373656460008301527f206f72207472616e7366657272656400000000000000000000000000000000006020830152604082019050919050565b6000612538603783612bba565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b600061259e601883612bba565b91507f73656e646572206d75737420626520612072656c6179657200000000000000006000830152602082019050919050565b60006125de601e83612bba565b91507f612070726f706f73616c2069732063757272656e746c792061637469766500006000830152602082019050919050565b600061261e601f83612bba565b91507f766f7465206f7574206f662074686520766f746520656e756d2072616e6765006000830152602082019050919050565b60006080830160008301516126696000860182612168565b506020830151848203602086015261268182826120fb565b9150506040830151848203604086015261269b82826120fb565b91505060608301516126b06060860182612238565b508091505092915050565b6126c481612c4c565b82525050565b6126d381612c56565b82525050565b60006126e58285612086565b6014820191506126f582846121bf565b91508190509392505050565b60006020820190506127166000830184612068565b92915050565b60006020820190506127316000830184612159565b92915050565b600060208201905061274c6000830184612177565b92915050565b60006040820190506127676000830185612177565b6127746020830184612247565b9392505050565b6000602082019050818103600083015261279581846121f0565b905092915050565b600060208201905081810360008301526127b78184612186565b905092915050565b60006020820190506127d46000830184612229565b92915050565b60006020820190506127ef6000830184612247565b92915050565b600060208201905061280a6000830184612265565b92915050565b6000602082019050818103600083015261282a8184612274565b905092915050565b6000602082019050818103600083015261284b816122ad565b9050919050565b6000602082019050818103600083015261286b816122ed565b9050919050565b6000602082019050818103600083015261288b81612353565b9050919050565b600060208201905081810360008301526128ab816123df565b9050919050565b600060208201905081810360008301526128cb8161241f565b9050919050565b600060208201905081810360008301526128eb81612485565b9050919050565b6000602082019050818103600083015261290b816124c5565b9050919050565b6000602082019050818103600083015261292b8161252b565b9050919050565b6000602082019050818103600083015261294b81612591565b9050919050565b6000602082019050818103600083015261296b816125d1565b9050919050565b6000602082019050818103600083015261298b81612611565b9050919050565b600060208201905081810360008301526129ac8184612651565b905092915050565b60006020820190506129c960008301846126bb565b92915050565b60006080820190506129e460008301876126bb565b81810360208301526129f6818661209d565b90508181036040830152612a0a818561209d565b9050612a196060830184612256565b95945050505050565b6000604082019050612a3760008301856126bb565b612a446020830184612256565b9392505050565b6000608082019050612a6060008301876126bb565b612a6d60208301866126bb565b612a7a6040830185612068565b8181036060830152612a8c8184612186565b905095945050505050565b6000602082019050612aac60008301846126ca565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612ad557600080fd5b8060405250919050565b600067ffffffffffffffff821115612af657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612bd682612c2c565b9050919050565b60008115159050919050565b6000819050919050565b6000819050612c0182612d77565b919050565b6000819050612c1482612d84565b919050565b6000819050612c2782612d91565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612c6e82612ccf565b9050919050565b6000612c8082612c87565b9050919050565b6000612c9282612c2c565b9050919050565b6000612ca482612bf3565b9050919050565b6000612cb682612c06565b9050919050565b6000612cc882612c19565b9050919050565b6000612cda82612ce1565b9050919050565b6000612cec82612c2c565b9050919050565b82818337600083830152505050565b60005b83811015612d20578082015181840152602081019050612d05565b83811115612d2f576000848401525b50505050565b6000612d4082612d47565b9050919050565b6000612d5282612d6a565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b60048110612d8157fe5b50565b60028110612d8e57fe5b50565b60028110612d9b57fe5b50565b612da781612bcb565b8114612db257600080fd5b50565b612dbe81612bdd565b8114612dc957600080fd5b50565b612dd581612be9565b8114612de057600080fd5b50565b60028110612df057600080fd5b50565b612dfc81612c4c565b8114612e0757600080fd5b5056fea264697066735822122055bdde7d0618d84b4c156e7150aa326a761aa5bc892502078773ca1a607cb69164736f6c63430006040033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID uint8, relayerContract common.Address, initialRelayerThreshold *big.Int) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, chainID, relayerContract, initialRelayerThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint8)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_chainID")
	return *ret0, err
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint8)
func (_Bridge *BridgeSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint8)
func (_Bridge *BridgeCallerSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCaller) CurrentRelayerThresholdProposal(opts *bind.CallOpts) (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	ret := new(struct {
		ProposedValue *big.Int
		Status        uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_currentRelayerThresholdProposal")
	return *ret, err
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCallerSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositCounts", arg0)
	return *ret0, err
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeSession) DepositCounts(arg0 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCaller) DepositProposals(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	ret := new(struct {
		DataHash [32]byte
		Status   uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_depositProposals", arg0, arg1)
	return *ret, err
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeSession) DepositProposals(arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCallerSession) DepositProposals(arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositRecords", arg0, arg1)
	return *ret0, err
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeSession) DepositRecords(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCallerSession) DepositRecords(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnDepositProposal(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_hasVotedOnDepositProposal", arg0, arg1, arg2)
	return *ret0, err
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeSession) HasVotedOnDepositProposal(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnDepositProposal(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCaller) RelayerContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerContract")
	return *ret0, err
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCallerSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerThreshold")
	return *ret0, err
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() constant returns(uint256)
func (_Bridge *BridgeCaller) TotalDepositProposals(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_totalDepositProposals")
	return *ret0, err
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() constant returns(uint256)
func (_Bridge *BridgeSession) TotalDepositProposals() (*big.Int, error) {
	return _Bridge.Contract.TotalDepositProposals(&_Bridge.CallOpts)
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() constant returns(uint256)
func (_Bridge *BridgeCallerSession) TotalDepositProposals() (*big.Int, error) {
	return _Bridge.Contract.TotalDepositProposals(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCaller) GetCurrentRelayerThresholdProposal(opts *bind.CallOpts) (*big.Int, []common.Address, []common.Address, uint8, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]common.Address)
		ret2 = new([]common.Address)
		ret3 = new(uint8)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Bridge.contract.Call(opts, out, "getCurrentRelayerThresholdProposal")
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCallerSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCaller) GetDepositProposal(opts *bind.CallOpts, destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	var (
		ret0 = new(BridgeDepositProposal)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getDepositProposal", destinationChainID, depositNonce)
	return *ret0, err
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeSession) GetDepositProposal(destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCallerSession) GetDepositProposal(destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactor) CreateRelayerThresholdProposal(opts *bind.TransactOpts, proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "createRelayerThresholdProposal", proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactorSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) Deposit(destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteDepositProposal(opts *bind.TransactOpts, originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeDepositProposal", originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) ExecuteDepositProposal(originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteDepositProposal(originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xa9b0b0fe.
//
// Solidity: function voteDepositProposal(uint256 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactor) VoteDepositProposal(opts *bind.TransactOpts, originChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteDepositProposal", originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xa9b0b0fe.
//
// Solidity: function voteDepositProposal(uint256 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeSession) VoteDepositProposal(originChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xa9b0b0fe.
//
// Solidity: function voteDepositProposal(uint256 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactorSession) VoteDepositProposal(originChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactor) VoteRelayerThresholdProposal(opts *bind.TransactOpts, vote uint8) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteRelayerThresholdProposal", vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactorSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	DestinationChainID        *big.Int
	OriginChainHandlerAddress common.Address
	DepositNonce              *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xeaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b9.
//
// Solidity: event Deposit(uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, destinationChainID []*big.Int, originChainHandlerAddress []common.Address, depositNonce []*big.Int) (*BridgeDepositIterator, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", destinationChainIDRule, originChainHandlerAddressRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xeaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b9.
//
// Solidity: event Deposit(uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, destinationChainID []*big.Int, originChainHandlerAddress []common.Address, depositNonce []*big.Int) (event.Subscription, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", destinationChainIDRule, originChainHandlerAddressRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xeaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b9.
//
// Solidity: event Deposit(uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalCreatedIterator is returned from FilterDepositProposalCreated and is used to iterate over the raw logs and unpacked data for DepositProposalCreated events raised by the Bridge contract.
type BridgeDepositProposalCreatedIterator struct {
	Event *BridgeDepositProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalCreated represents a DepositProposalCreated event raised by the Bridge contract.
type BridgeDepositProposalCreated struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	DataHash           [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalCreated is a free log retrieval operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterDepositProposalCreated(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalCreatedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalCreatedIterator{contract: _Bridge.contract, event: "DepositProposalCreated", logs: logs, sub: sub}, nil
}

// WatchDepositProposalCreated is a free log subscription operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchDepositProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalCreated, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalCreated is a log parse operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseDepositProposalCreated(log types.Log) (*BridgeDepositProposalCreated, error) {
	event := new(BridgeDepositProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalExecutedIterator is returned from FilterDepositProposalExecuted and is used to iterate over the raw logs and unpacked data for DepositProposalExecuted events raised by the Bridge contract.
type BridgeDepositProposalExecutedIterator struct {
	Event *BridgeDepositProposalExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalExecuted represents a DepositProposalExecuted event raised by the Bridge contract.
type BridgeDepositProposalExecuted struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalExecuted is a free log retrieval operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalExecuted(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalExecutedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalExecutedIterator{contract: _Bridge.contract, event: "DepositProposalExecuted", logs: logs, sub: sub}, nil
}

// WatchDepositProposalExecuted is a free log subscription operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalExecuted(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalExecuted, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalExecuted)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalExecuted is a log parse operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalExecuted(log types.Log) (*BridgeDepositProposalExecuted, error) {
	event := new(BridgeDepositProposalExecuted)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalFinalizedIterator is returned from FilterDepositProposalFinalized and is used to iterate over the raw logs and unpacked data for DepositProposalFinalized events raised by the Bridge contract.
type BridgeDepositProposalFinalizedIterator struct {
	Event *BridgeDepositProposalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalFinalized represents a DepositProposalFinalized event raised by the Bridge contract.
type BridgeDepositProposalFinalized struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalFinalized is a free log retrieval operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalFinalized(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalFinalizedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalFinalizedIterator{contract: _Bridge.contract, event: "DepositProposalFinalized", logs: logs, sub: sub}, nil
}

// WatchDepositProposalFinalized is a free log subscription operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalFinalized(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalFinalized, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalFinalized)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalFinalized is a log parse operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalFinalized(log types.Log) (*BridgeDepositProposalFinalized, error) {
	event := new(BridgeDepositProposalFinalized)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalVoteIterator is returned from FilterDepositProposalVote and is used to iterate over the raw logs and unpacked data for DepositProposalVote events raised by the Bridge contract.
type BridgeDepositProposalVoteIterator struct {
	Event *BridgeDepositProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalVote represents a DepositProposalVote event raised by the Bridge contract.
type BridgeDepositProposalVote struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Status             uint8
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalVote is a free log retrieval operation binding the contract event 0x5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b890.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) FilterDepositProposalVote(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalVoteIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalVoteIterator{contract: _Bridge.contract, event: "DepositProposalVote", logs: logs, sub: sub}, nil
}

// WatchDepositProposalVote is a free log subscription operation binding the contract event 0x5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b890.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) WatchDepositProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalVote, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalVote is a log parse operation binding the contract event 0x5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b890.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) ParseDepositProposalVote(log types.Log) (*BridgeDepositProposalVote, error) {
	event := new(BridgeDepositProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalCreatedIterator is returned from FilterRelayerThresholdProposalCreated and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalCreated events raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreatedIterator struct {
	Event *BridgeRelayerThresholdProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalCreated represents a RelayerThresholdProposalCreated event raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreated struct {
	ProposedValue *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalCreated is a free log retrieval operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalCreated(opts *bind.FilterOpts, proposedValue []*big.Int) (*BridgeRelayerThresholdProposalCreatedIterator, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalCreatedIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalCreated", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalCreated is a free log subscription operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalCreated, proposedValue []*big.Int) (event.Subscription, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalCreated is a log parse operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalCreated(log types.Log) (*BridgeRelayerThresholdProposalCreated, error) {
	event := new(BridgeRelayerThresholdProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalVoteIterator is returned from FilterRelayerThresholdProposalVote and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalVote events raised by the Bridge contract.
type BridgeRelayerThresholdProposalVoteIterator struct {
	Event *BridgeRelayerThresholdProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalVote represents a RelayerThresholdProposalVote event raised by the Bridge contract.
type BridgeRelayerThresholdProposalVote struct {
	Vote uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalVote is a free log retrieval operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalVote(opts *bind.FilterOpts) (*BridgeRelayerThresholdProposalVoteIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalVoteIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalVote", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalVote is a free log subscription operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalVote) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalVote is a log parse operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalVote(log types.Log) (*BridgeRelayerThresholdProposalVote, error) {
	event := new(BridgeRelayerThresholdProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

var RuntimeBytecode = "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063beab713111610097578063e9cdaead11610066578063e9cdaead146102c5578063ea059625146102e1578063faa9bce9146102ff578063fe6121361461031b57610100565b8063beab71311461023d578063cb4815e01461025b578063d7a9cd791461028b578063df269060146102a957610100565b8063941861b5116100d3578063941861b514610190578063a9b0b0fe146101c0578063b06e1cc3146101dc578063ba3915731461020d57610100565b8063030e7ddd1461010557806306899ca4146101215780635f31b69c1461013f578063613d880714610160575b600080fd5b61011f600480360381019061011a9190611f86565b61033a565b005b610129610583565b60405161013691906129b4565b60405180910390f35b610147610589565b60405161015794939291906129cf565b60405180910390f35b61017a60048036038101906101759190611efb565b6106d0565b604051610187919061277b565b60405180910390f35b6101aa60048036038101906101a59190611f37565b61078d565b6040516101b7919061271c565b60405180910390f35b6101da60048036038101906101d59190612001565b6107c9565b005b6101f660048036038101906101f19190611efb565b610db8565b604051610204929190612752565b60405180910390f35b61022760048036038101906102229190611e42565b610df6565b60405161023491906129b4565b60405180910390f35b610245610e0e565b6040516102529190612a97565b60405180910390f35b61027560048036038101906102709190611efb565b610e20565b6040516102829190612992565b60405180910390f35b610293610fb2565b6040516102a091906129b4565b60405180910390f35b6102c360048036038101906102be9190611e42565b610fb8565b005b6102df60048036038101906102da9190611e19565b611444565b005b6102e961196d565b6040516102f691906127bf565b60405180910390f35b61031960048036038101906103149190611e94565b611993565b005b610323611ab2565b604051610331929190612a22565b60405180910390f35b6000600a6000868152602001908152602001600020600085815260200190815260200160002090506000600381111561036f57fe5b8160030160009054906101000a900460ff16600381111561038c57fe5b14156103cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c490612832565b60405180910390fd5b600260038111156103da57fe5b8160030160009054906101000a900460ff1660038111156103f757fe5b14610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e90612912565b60405180910390fd5b8060000154838360405160200161044f9291906126d9565b60405160208183030381529060405280519060200120146104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049c906128b2565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b81526004016104e3919061279d565b600060405180830381600087803b1580156104fd57600080fd5b505af1158015610511573d6000803e3d6000fd5b5050505060038260030160006101000a81548160ff0219169083600381111561053657fe5b0217905550846000809054906101000a900460ff1660ff16877f4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d0760405160405180910390a4505050505050565b60075481565b60006060806000600260000154600280016002600301600260040160009054906101000a900460ff168280548060200260200160405190810160405280929190818152602001828054801561063357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105e9575b50505050509250818054806020026020016040519081016040528092919081815260200182805480156106bb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610671575b50505050509150935093509350935090919293565b6009602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b505050505081565b600b602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016108289190612701565b602060405180830381600087803b15801561084257600080fd5b505af1158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a9190611df0565b6108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090612932565b60405180910390fd5b6000600a60008681526020019081526020016000206000858152602001908152602001600020905060018160030160009054906101000a900460ff16600381111561090057fe5b1115610941576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610938906128f2565b60405180910390fd5b600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e790612852565b60405180910390fd5b60008160030160009054906101000a900460ff166003811115610a0f57fe5b1415610bef576007600081546001019190508190555060405180608001604052808481526020016001604051908082528060200260200182016040528015610a665781602001602082028036833780820191505090505b5081526020016000604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b50815260200160016003811115610aaf57fe5b815250600a60008781526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001019080519060200190610afc929190611b76565b506040820151816002019080519060200190610b19929190611b76565b5060608201518160030160006101000a81548160ff02191690836003811115610b3e57fe5b02179055509050503381600101600081548110610b5757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000809054906101000a900460ff1660ff16867f376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c986604051610be29190612737565b60405180910390a4610c55565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600b6000878152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550836000809054906101000a900460ff1660ff16867f5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b8908460030160009054906101000a900460ff16604051610d2391906127da565b60405180910390a460018054111580610d455750600154816001018054905010155b15610db15760028160030160006101000a81548160ff02191690836003811115610d6b57fe5b0217905550836000809054906101000a900460ff1660ff16867fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a45b5050505050565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60086020528060005260406000206000915090505481565b6000809054906101000a900460ff1681565b610e28611c00565b600a600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ee657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e9c575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610f7457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f2a575b505050505081526020016003820160009054906101000a900460ff166003811115610f9b57fe5b6003811115610fa657fe5b81525050905092915050565b60015481565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016110179190612701565b602060405180830381600087803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110699190611df0565b6110a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109f90612932565b60405180910390fd5b600060018111156110b557fe5b600260040160009054906101000a900460ff1660018111156110d357fe5b14611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a90612952565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190611e6b565b8211156111f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ee90612872565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156112385781602001602082028036833780820191505090505b508152602001600060405190808252806020026020018201604052801561126e5781602001602082028036833780820191505090505b50815260200160018081111561128057fe5b81525060026000820151816000015560208201518160020190805190602001906112ab929190611b76565b5060408201518160030190805190602001906112c8929190611b76565b5060608201518160040160006101000a81548160ff021916908360018111156112ed57fe5b0217905550905050600180541161135f576002600001546001819055506000600260040160006101000a81548160ff0219169083600181111561132c57fe5b0217905550817fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a25b336002800160008154811061137057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550817f79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d60405160405180910390a25050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016114a39190612701565b602060405180830381600087803b1580156114bd57600080fd5b505af11580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190611df0565b611534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152b90612932565b60405180910390fd5b60018081111561154057fe5b600260040160009054906101000a900460ff16600181111561155e57fe5b1461159e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611595906128d2565b60405180910390fd5b600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561162e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162590612892565b60405180910390fd5b600182600181111561163c57fe5b60ff161115611680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167790612972565b60405180910390fd5b60018081111561168c57fe5b82600181111561169857fe5b14156117085760028001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061176f565b6002600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1826040516117f991906127f5565b60405180910390a160015460028001805490501061187b576002600001546001819055506000600260040160006101000a81548160ff0219169083600181111561183f57fe5b02179055506002600001547fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a2611969565b60015461193a600260030180549050600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192c9190611e6b565b611ad190919063ffffffff16565b1015611968576000600260040160006101000a81548160ff0219169083600181111561196257fe5b02179055505b5b5050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860008581526020019081526020016000206000815460010191905081905590508160096000868152602001908152602001600020600083815260200190815260200160002090805190602001906119ef929190611c36565b5060008390508073ffffffffffffffffffffffffffffffffffffffff1663cb65d221868433876040518563ffffffff1660e01b8152600401611a349493929190612a4b565b600060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b50505050818473ffffffffffffffffffffffffffffffffffffffff16867feaa18152488ce5959073c9c79c88ca90b3d96c00de1f118cfaad664c3dab06b960405160405180910390a45050505050565b60028060000154908060040160009054906101000a900460ff16905082565b6000611b1383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611b1b565b905092915050565b6000838311158290611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a9190612810565b60405180910390fd5b5060008385039050809150509392505050565b828054828255906000526020600020908101928215611bef579160200282015b82811115611bee5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b96565b5b509050611bfc9190611cb6565b5090565b604051806080016040528060008019168152602001606081526020016060815260200160006003811115611c3057fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c7757805160ff1916838001178555611ca5565b82800160010185558215611ca5579182015b82811115611ca4578251825591602001919060010190611c89565b5b509050611cb29190611cf9565b5090565b611cf691905b80821115611cf257600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611cbc565b5090565b90565b611d1b91905b80821115611d17576000816000905550600101611cff565b5090565b90565b600081359050611d2d81612d9e565b92915050565b600081519050611d4281612db5565b92915050565b600081359050611d5781612dcc565b92915050565b600082601f830112611d6e57600080fd5b8135611d81611d7c82612adf565b612ab2565b91508082526020830160208301858383011115611d9d57600080fd5b611da8838284612cf3565b50505092915050565b600081359050611dc081612de3565b92915050565b600081359050611dd581612df3565b92915050565b600081519050611dea81612df3565b92915050565b600060208284031215611e0257600080fd5b6000611e1084828501611d33565b91505092915050565b600060208284031215611e2b57600080fd5b6000611e3984828501611db1565b91505092915050565b600060208284031215611e5457600080fd5b6000611e6284828501611dc6565b91505092915050565b600060208284031215611e7d57600080fd5b6000611e8b84828501611ddb565b91505092915050565b600080600060608486031215611ea957600080fd5b6000611eb786828701611dc6565b9350506020611ec886828701611d1e565b925050604084013567ffffffffffffffff811115611ee557600080fd5b611ef186828701611d5d565b9150509250925092565b60008060408385031215611f0e57600080fd5b6000611f1c85828601611dc6565b9250506020611f2d85828601611dc6565b9150509250929050565b600080600060608486031215611f4c57600080fd5b6000611f5a86828701611dc6565b9350506020611f6b86828701611dc6565b9250506040611f7c86828701611d1e565b9150509250925092565b60008060008060808587031215611f9c57600080fd5b6000611faa87828801611dc6565b9450506020611fbb87828801611dc6565b9350506040611fcc87828801611d1e565b925050606085013567ffffffffffffffff811115611fe957600080fd5b611ff587828801611d5d565b91505092959194509250565b60008060006060848603121561201657600080fd5b600061202486828701611dc6565b935050602061203586828701611dc6565b925050604061204686828701611d48565b9150509250925092565b600061205c8383612077565b60208301905092915050565b61207181612c63565b82525050565b61208081612bcb565b82525050565b61209761209282612bcb565b612d35565b82525050565b60006120a882612b36565b6120b28185612b8d565b93506120bd83612b1b565b8060005b838110156120ee5781516120d58882612050565b97506120e083612b6f565b9250506001810190506120c1565b5085935050505092915050565b600061210682612b2b565b6121108185612b7c565b935061211b83612b0b565b8060005b8381101561214c5781516121338882612050565b975061213e83612b62565b92505060018101905061211f565b5085935050505092915050565b61216281612bdd565b82525050565b61217181612be9565b82525050565b61218081612be9565b82525050565b600061219182612b4c565b61219b8185612b9e565b93506121ab818560208601612d02565b6121b481612d59565b840191505092915050565b60006121ca82612b4c565b6121d48185612baf565b93506121e4818560208601612d02565b80840191505092915050565b60006121fb82612b41565b6122058185612b9e565b9350612215818560208601612d02565b61221e81612d59565b840191505092915050565b61223281612c75565b82525050565b61224181612c99565b82525050565b61225081612c99565b82525050565b61225f81612cab565b82525050565b61226e81612cbd565b82525050565b600061227f82612b57565b6122898185612bba565b9350612299818560208601612d02565b6122a281612d59565b840191505092915050565b60006122ba601683612bba565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b60006122fa602583612bba565b91507f72656c617965722068617320616c726561647920766f746564206f6e2070726f60008301527f706f73616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612360604283612bba565b91507f70726f706f7365642076616c75652063616e6e6f74206265206772656174657260008301527f207468616e2074686520746f74616c206e756d626572206f662072656c61796560208301527f72730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006123ec601983612bba565b91507f72656c617965722068617320616c726561647920766f746564000000000000006000830152602082019050919050565b600061242c603183612bba565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b6000612492601f83612bba565b91507f6e6f2070726f706f73616c2069732063757272656e746c7920616374697665006000830152602082019050919050565b60006124d2602f83612bba565b91507f70726f706f73616c2068617320616c7265616479206265656e2070617373656460008301527f206f72207472616e7366657272656400000000000000000000000000000000006020830152604082019050919050565b6000612538603783612bba565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b600061259e601883612bba565b91507f73656e646572206d75737420626520612072656c6179657200000000000000006000830152602082019050919050565b60006125de601e83612bba565b91507f612070726f706f73616c2069732063757272656e746c792061637469766500006000830152602082019050919050565b600061261e601f83612bba565b91507f766f7465206f7574206f662074686520766f746520656e756d2072616e6765006000830152602082019050919050565b60006080830160008301516126696000860182612168565b506020830151848203602086015261268182826120fb565b9150506040830151848203604086015261269b82826120fb565b91505060608301516126b06060860182612238565b508091505092915050565b6126c481612c4c565b82525050565b6126d381612c56565b82525050565b60006126e58285612086565b6014820191506126f582846121bf565b91508190509392505050565b60006020820190506127166000830184612068565b92915050565b60006020820190506127316000830184612159565b92915050565b600060208201905061274c6000830184612177565b92915050565b60006040820190506127676000830185612177565b6127746020830184612247565b9392505050565b6000602082019050818103600083015261279581846121f0565b905092915050565b600060208201905081810360008301526127b78184612186565b905092915050565b60006020820190506127d46000830184612229565b92915050565b60006020820190506127ef6000830184612247565b92915050565b600060208201905061280a6000830184612265565b92915050565b6000602082019050818103600083015261282a8184612274565b905092915050565b6000602082019050818103600083015261284b816122ad565b9050919050565b6000602082019050818103600083015261286b816122ed565b9050919050565b6000602082019050818103600083015261288b81612353565b9050919050565b600060208201905081810360008301526128ab816123df565b9050919050565b600060208201905081810360008301526128cb8161241f565b9050919050565b600060208201905081810360008301526128eb81612485565b9050919050565b6000602082019050818103600083015261290b816124c5565b9050919050565b6000602082019050818103600083015261292b8161252b565b9050919050565b6000602082019050818103600083015261294b81612591565b9050919050565b6000602082019050818103600083015261296b816125d1565b9050919050565b6000602082019050818103600083015261298b81612611565b9050919050565b600060208201905081810360008301526129ac8184612651565b905092915050565b60006020820190506129c960008301846126bb565b92915050565b60006080820190506129e460008301876126bb565b81810360208301526129f6818661209d565b90508181036040830152612a0a818561209d565b9050612a196060830184612256565b95945050505050565b6000604082019050612a3760008301856126bb565b612a446020830184612256565b9392505050565b6000608082019050612a6060008301876126bb565b612a6d60208301866126bb565b612a7a6040830185612068565b8181036060830152612a8c8184612186565b905095945050505050565b6000602082019050612aac60008301846126ca565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612ad557600080fd5b8060405250919050565b600067ffffffffffffffff821115612af657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612bd682612c2c565b9050919050565b60008115159050919050565b6000819050919050565b6000819050612c0182612d77565b919050565b6000819050612c1482612d84565b919050565b6000819050612c2782612d91565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612c6e82612ccf565b9050919050565b6000612c8082612c87565b9050919050565b6000612c9282612c2c565b9050919050565b6000612ca482612bf3565b9050919050565b6000612cb682612c06565b9050919050565b6000612cc882612c19565b9050919050565b6000612cda82612ce1565b9050919050565b6000612cec82612c2c565b9050919050565b82818337600083830152505050565b60005b83811015612d20578082015181840152602081019050612d05565b83811115612d2f576000848401525b50505050565b6000612d4082612d47565b9050919050565b6000612d5282612d6a565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b60048110612d8157fe5b50565b60028110612d8e57fe5b50565b60028110612d9b57fe5b50565b612da781612bcb565b8114612db257600080fd5b50565b612dbe81612bdd565b8114612dc957600080fd5b50565b612dd581612be9565b8114612de057600080fd5b50565b60028110612df057600080fd5b50565b612dfc81612c4c565b8114612e0757600080fd5b5056fea264697066735822122055bdde7d0618d84b4c156e7150aa326a761aa5bc892502078773ca1a607cb69164736f6c63430006040033"
