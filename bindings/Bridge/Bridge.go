// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeDepositProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeDepositProposal struct {
	DataHash [32]byte
	YesVotes []common.Address
	NoVotes  []common.Address
	Status   uint8
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"DepositProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"DepositProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"RelayerThresholdProposalVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposedValue\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositProposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnDepositProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerContract\",\"outputs\":[{\"internalType\":\"contractIRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"getDepositProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"internalType\":\"structBridge.DepositProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"createRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b5060405162002f2a38038062002f2a8339818101604052810190620000379190620000bd565b8260008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555050505062000185565b600081519050620000a08162000151565b92915050565b600081519050620000b7816200016b565b92915050565b600080600060608486031215620000d357600080fd5b6000620000e386828701620000a6565b9350506020620000f6868287016200008f565b92505060406200010986828701620000a6565b9150509250925092565b6000620001208262000127565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200015c8162000113565b81146200016857600080fd5b50565b620001768162000147565b81146200018257600080fd5b50565b612d9580620001956000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063beab713111610097578063e9cdaead11610066578063e9cdaead1461029c578063ea059625146102b8578063faa9bce9146102d6578063fe612136146102f2576100f5565b8063beab713114610214578063cb4815e014610232578063d7a9cd7914610262578063df26906014610280576100f5565b8063941861b5116100d3578063941861b514610167578063a9b0b0fe14610197578063b06e1cc3146101b3578063ba391573146101e4576100f5565b8063030e7ddd146100fa5780635f31b69c14610116578063613d880714610137575b600080fd5b610114600480360381019061010f9190611f12565b610311565b005b61011e61054b565b60405161012e949392919061294c565b60405180910390f35b610151600480360381019061014c9190611e87565b610692565b60405161015e91906126f8565b60405180910390f35b610181600480360381019061017c9190611ec3565b61074f565b60405161018e9190612699565b60405180910390f35b6101b160048036038101906101ac9190611f8d565b61078b565b005b6101cd60048036038101906101c89190611e87565b610d3f565b6040516101db9291906126cf565b60405180910390f35b6101fe60048036038101906101f99190611dce565b610d7d565b60405161020b9190612931565b60405180910390f35b61021c610d95565b6040516102299190612931565b60405180910390f35b61024c60048036038101906102479190611e87565b610d9b565b604051610259919061290f565b60405180910390f35b61026a610f2d565b6040516102779190612931565b60405180910390f35b61029a60048036038101906102959190611dce565b610f33565b005b6102b660048036038101906102b19190611da5565b6113c2565b005b6102c06118ec565b6040516102cd919061273c565b60405180910390f35b6102f060048036038101906102eb9190611e20565b611912565b005b6102fa611a3e565b60405161030892919061299f565b60405180910390f35b6000600a6000868152602001908152602001600020600085815260200190815260200160002090506000600381111561034657fe5b8160030160009054906101000a900460ff16600381111561036357fe5b14156103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b906127af565b60405180910390fd5b600260038111156103b157fe5b8160030160009054906101000a900460ff1660038111156103ce57fe5b1461040e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104059061288f565b60405180910390fd5b80600001548383604051602001610426929190612656565b604051602081830303815290604052805190602001201461047c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104739061282f565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b81526004016104ba919061271a565b600060405180830381600087803b1580156104d457600080fd5b505af11580156104e8573d6000803e3d6000fd5b5050505060038260030160006101000a81548160ff0219169083600381111561050d57fe5b021790555084600054877f4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d0760405160405180910390a4505050505050565b60006060806000600360000154600360020160038001600360040160009054906101000a900460ff16828054806020026020016040519081016040528092919081815260200182805480156105f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105ab575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561067d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610633575b50505050509150935093509350935090919293565b6009602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107475780601f1061071c57610100808354040283529160200191610747565b820191906000526020600020905b81548152906001019060200180831161072a57829003601f168201915b505050505081565b600b602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016107eb919061267e565b602060405180830381600087803b15801561080557600080fd5b505af1158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190611d7c565b61087c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610873906128af565b60405180910390fd5b6000600a60008681526020019081526020016000206000858152602001908152602001600020905060018160030160009054906101000a900460ff1660038111156108c357fe5b1115610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb9061286f565b60405180910390fd5b600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa906127cf565b60405180910390fd5b60008160030160009054906101000a900460ff1660038111156109d257fe5b1415610b935760405180608001604052808481526020016001604051908082528060200260200182016040528015610a195781602001602082028036833780820191505090505b5081526020016000604051908082528060200260200182016040528015610a4f5781602001602082028036833780820191505090505b50815260200160016003811115610a6257fe5b815250600a60008781526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001019080519060200190610aaf929190611b02565b506040820151816002019080519060200190610acc929190611b02565b5060608201518160030160006101000a81548160ff02191690836003811115610af157fe5b02179055509050503381600101600081548110610b0a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600054867f376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c986604051610b8691906126b4565b60405180910390a4610bf9565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600b6000878152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555083600054867f5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b8908460030160009054906101000a900460ff16604051610cb89190612757565b60405180910390a46001600254111580610cdb5750600254816001018054905010155b15610d385760028160030160006101000a81548160ff02191690836003811115610d0157fe5b021790555083600054867fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a45b5050505050565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60086020528060005260406000206000915090505481565b60005481565b610da3611b8c565b600a600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610e6157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e17575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610eef57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ea5575b505050505081526020016003820160009054906101000a900460ff166003811115610f1657fe5b6003811115610f2157fe5b81525050905092915050565b60025481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b8152600401610f93919061267e565b602060405180830381600087803b158015610fad57600080fd5b505af1158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe59190611d7c565b611024576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101b906128af565b60405180910390fd5b6000600181111561103157fe5b600360040160009054906101000a900460ff16600181111561104f57fe5b1461108f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611086906128cf565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156110f957600080fd5b505af115801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190611df7565b821115611173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116a906127ef565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156111b45781602001602082028036833780820191505090505b50815260200160006040519080825280602002602001820160405280156111ea5781602001602082028036833780820191505090505b5081526020016001808111156111fc57fe5b8152506003600082015181600001556020820151816002019080519060200190611227929190611b02565b506040820151816003019080519060200190611244929190611b02565b5060608201518160040160006101000a81548160ff0219169083600181111561126957fe5b02179055509050506001600254116112dc576003600001546002819055506000600360040160006101000a81548160ff021916908360018111156112a957fe5b0217905550817fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a25b3360036002016000815481106112ee57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550817f79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d60405160405180910390a25050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b8152600401611422919061267e565b602060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114749190611d7c565b6114b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114aa906128af565b60405180910390fd5b6001808111156114bf57fe5b600360040160009054906101000a900460ff1660018111156114dd57fe5b1461151d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115149061284f565b60405180910390fd5b600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156115ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a49061280f565b60405180910390fd5b60018260018111156115bb57fe5b60ff1611156115ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f6906128ef565b60405180910390fd5b60018081111561160b57fe5b82600181111561161757fe5b1415611688576003600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506116ee565b60038001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1826040516117789190612772565b60405180910390a1600254600360020180549050106117fb576003600001546002819055506000600360040160006101000a81548160ff021916908360018111156117bf57fe5b02179055506003600001547fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a26118e8565b6002546118b96003800180549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561187357600080fd5b505af1158015611887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ab9190611df7565b611a5d90919063ffffffff16565b10156118e7576000600360040160006101000a81548160ff021916908360018111156118e157fe5b02179055505b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006008600085815260200190815260200160002060008154600101919050819055905081600960008681526020019081526020016000206000838152602001908152602001600020908051906020019061196e929190611bc2565b5060008390508073ffffffffffffffffffffffffffffffffffffffff1663cb65d221868433876040518563ffffffff1660e01b81526004016119b394939291906129c8565b600060405180830381600087803b1580156119cd57600080fd5b505af11580156119e1573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16856000547f9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f047695985604051611a2f9190612931565b60405180910390a45050505050565b60038060000154908060040160009054906101000a900460ff16905082565b6000611a9f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611aa7565b905092915050565b6000838311158290611aef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae6919061278d565b60405180910390fd5b5060008385039050809150509392505050565b828054828255906000526020600020908101928215611b7b579160200282015b82811115611b7a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611b22565b5b509050611b889190611c42565b5090565b604051806080016040528060008019168152602001606081526020016060815260200160006003811115611bbc57fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c0357805160ff1916838001178555611c31565b82800160010185558215611c31579182015b82811115611c30578251825591602001919060010190611c15565b5b509050611c3e9190611c85565b5090565b611c8291905b80821115611c7e57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611c48565b5090565b90565b611ca791905b80821115611ca3576000816000905550600101611c8b565b5090565b90565b600081359050611cb981612cf3565b92915050565b600081519050611cce81612d0a565b92915050565b600081359050611ce381612d21565b92915050565b600082601f830112611cfa57600080fd5b8135611d0d611d0882612a41565b612a14565b91508082526020830160208301858383011115611d2957600080fd5b611d34838284612c48565b50505092915050565b600081359050611d4c81612d38565b92915050565b600081359050611d6181612d48565b92915050565b600081519050611d7681612d48565b92915050565b600060208284031215611d8e57600080fd5b6000611d9c84828501611cbf565b91505092915050565b600060208284031215611db757600080fd5b6000611dc584828501611d3d565b91505092915050565b600060208284031215611de057600080fd5b6000611dee84828501611d52565b91505092915050565b600060208284031215611e0957600080fd5b6000611e1784828501611d67565b91505092915050565b600080600060608486031215611e3557600080fd5b6000611e4386828701611d52565b9350506020611e5486828701611caa565b925050604084013567ffffffffffffffff811115611e7157600080fd5b611e7d86828701611ce9565b9150509250925092565b60008060408385031215611e9a57600080fd5b6000611ea885828601611d52565b9250506020611eb985828601611d52565b9150509250929050565b600080600060608486031215611ed857600080fd5b6000611ee686828701611d52565b9350506020611ef786828701611d52565b9250506040611f0886828701611caa565b9150509250925092565b60008060008060808587031215611f2857600080fd5b6000611f3687828801611d52565b9450506020611f4787828801611d52565b9350506040611f5887828801611caa565b925050606085013567ffffffffffffffff811115611f7557600080fd5b611f8187828801611ce9565b91505092959194509250565b600080600060608486031215611fa257600080fd5b6000611fb086828701611d52565b9350506020611fc186828701611d52565b9250506040611fd286828701611cd4565b9150509250925092565b6000611fe88383612003565b60208301905092915050565b611ffd81612bb8565b82525050565b61200c81612b2d565b82525050565b61202361201e82612b2d565b612c8a565b82525050565b600061203482612a98565b61203e8185612aef565b935061204983612a7d565b8060005b8381101561207a5781516120618882611fdc565b975061206c83612ad1565b92505060018101905061204d565b5085935050505092915050565b600061209282612a8d565b61209c8185612ade565b93506120a783612a6d565b8060005b838110156120d85781516120bf8882611fdc565b97506120ca83612ac4565b9250506001810190506120ab565b5085935050505092915050565b6120ee81612b3f565b82525050565b6120fd81612b4b565b82525050565b61210c81612b4b565b82525050565b600061211d82612aae565b6121278185612b00565b9350612137818560208601612c57565b61214081612cae565b840191505092915050565b600061215682612aae565b6121608185612b11565b9350612170818560208601612c57565b80840191505092915050565b600061218782612aa3565b6121918185612b00565b93506121a1818560208601612c57565b6121aa81612cae565b840191505092915050565b6121be81612bca565b82525050565b6121cd81612bee565b82525050565b6121dc81612bee565b82525050565b6121eb81612c00565b82525050565b6121fa81612c12565b82525050565b600061220b82612ab9565b6122158185612b1c565b9350612225818560208601612c57565b61222e81612cae565b840191505092915050565b6000612246601683612b1c565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b6000612286602583612b1c565b91507f72656c617965722068617320616c726561647920766f746564206f6e2070726f60008301527f706f73616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006122ec604283612b1c565b91507f70726f706f7365642076616c75652063616e6e6f74206265206772656174657260008301527f207468616e2074686520746f74616c206e756d626572206f662072656c61796560208301527f72730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000612378601983612b1c565b91507f72656c617965722068617320616c726561647920766f746564000000000000006000830152602082019050919050565b60006123b8603183612b1c565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b600061241e601f83612b1c565b91507f6e6f2070726f706f73616c2069732063757272656e746c7920616374697665006000830152602082019050919050565b600061245e602f83612b1c565b91507f70726f706f73616c2068617320616c7265616479206265656e2070617373656460008301527f206f72207472616e7366657272656400000000000000000000000000000000006020830152604082019050919050565b60006124c4603783612b1c565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b600061252a601883612b1c565b91507f73656e646572206d75737420626520612072656c6179657200000000000000006000830152602082019050919050565b600061256a601e83612b1c565b91507f612070726f706f73616c2069732063757272656e746c792061637469766500006000830152602082019050919050565b60006125aa601f83612b1c565b91507f766f7465206f7574206f662074686520766f746520656e756d2072616e6765006000830152602082019050919050565b60006080830160008301516125f560008601826120f4565b506020830151848203602086015261260d8282612087565b915050604083015184820360408601526126278282612087565b915050606083015161263c60608601826121c4565b508091505092915050565b61265081612bae565b82525050565b60006126628285612012565b601482019150612672828461214b565b91508190509392505050565b60006020820190506126936000830184611ff4565b92915050565b60006020820190506126ae60008301846120e5565b92915050565b60006020820190506126c96000830184612103565b92915050565b60006040820190506126e46000830185612103565b6126f160208301846121d3565b9392505050565b60006020820190508181036000830152612712818461217c565b905092915050565b600060208201905081810360008301526127348184612112565b905092915050565b600060208201905061275160008301846121b5565b92915050565b600060208201905061276c60008301846121d3565b92915050565b600060208201905061278760008301846121f1565b92915050565b600060208201905081810360008301526127a78184612200565b905092915050565b600060208201905081810360008301526127c881612239565b9050919050565b600060208201905081810360008301526127e881612279565b9050919050565b60006020820190508181036000830152612808816122df565b9050919050565b600060208201905081810360008301526128288161236b565b9050919050565b60006020820190508181036000830152612848816123ab565b9050919050565b6000602082019050818103600083015261286881612411565b9050919050565b6000602082019050818103600083015261288881612451565b9050919050565b600060208201905081810360008301526128a8816124b7565b9050919050565b600060208201905081810360008301526128c88161251d565b9050919050565b600060208201905081810360008301526128e88161255d565b9050919050565b600060208201905081810360008301526129088161259d565b9050919050565b6000602082019050818103600083015261292981846125dd565b905092915050565b60006020820190506129466000830184612647565b92915050565b60006080820190506129616000830187612647565b81810360208301526129738186612029565b905081810360408301526129878185612029565b905061299660608301846121e2565b95945050505050565b60006040820190506129b46000830185612647565b6129c160208301846121e2565b9392505050565b60006080820190506129dd6000830187612647565b6129ea6020830186612647565b6129f76040830185611ff4565b8181036060830152612a098184612112565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715612a3757600080fd5b8060405250919050565b600067ffffffffffffffff821115612a5857600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612b3882612b8e565b9050919050565b60008115159050919050565b6000819050919050565b6000819050612b6382612ccc565b919050565b6000819050612b7682612cd9565b919050565b6000819050612b8982612ce6565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612bc382612c24565b9050919050565b6000612bd582612bdc565b9050919050565b6000612be782612b8e565b9050919050565b6000612bf982612b55565b9050919050565b6000612c0b82612b68565b9050919050565b6000612c1d82612b7b565b9050919050565b6000612c2f82612c36565b9050919050565b6000612c4182612b8e565b9050919050565b82818337600083830152505050565b60005b83811015612c75578082015181840152602081019050612c5a565b83811115612c84576000848401525b50505050565b6000612c9582612c9c565b9050919050565b6000612ca782612cbf565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b60048110612cd657fe5b50565b60028110612ce357fe5b50565b60028110612cf057fe5b50565b612cfc81612b2d565b8114612d0757600080fd5b50565b612d1381612b3f565b8114612d1e57600080fd5b50565b612d2a81612b4b565b8114612d3557600080fd5b50565b60028110612d4557600080fd5b50565b612d5181612bae565b8114612d5c57600080fd5b5056fea26469706673582212201b0bee5836511fd043ed92a0384e4be80fd0bd781261080fcc2b3b1ed57f3e4f64736f6c63430006040033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID *big.Int, relayerContract common.Address, initialRelayerThreshold *big.Int) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, chainID, relayerContract, initialRelayerThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint256)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_chainID")
	return *ret0, err
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint256)
func (_Bridge *BridgeSession) ChainID() (*big.Int, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint256)
func (_Bridge *BridgeCallerSession) ChainID() (*big.Int, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCaller) CurrentRelayerThresholdProposal(opts *bind.CallOpts) (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	ret := new(struct {
		ProposedValue *big.Int
		Status        uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_currentRelayerThresholdProposal")
	return *ret, err
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCallerSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositCounts", arg0)
	return *ret0, err
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeSession) DepositCounts(arg0 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCaller) DepositProposals(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	ret := new(struct {
		DataHash [32]byte
		Status   uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_depositProposals", arg0, arg1)
	return *ret, err
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeSession) DepositProposals(arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCallerSession) DepositProposals(arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositRecords", arg0, arg1)
	return *ret0, err
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeSession) DepositRecords(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCallerSession) DepositRecords(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnDepositProposal(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_hasVotedOnDepositProposal", arg0, arg1, arg2)
	return *ret0, err
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeSession) HasVotedOnDepositProposal(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnDepositProposal(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCaller) RelayerContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerContract")
	return *ret0, err
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCallerSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerThreshold")
	return *ret0, err
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCaller) GetCurrentRelayerThresholdProposal(opts *bind.CallOpts) (*big.Int, []common.Address, []common.Address, uint8, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]common.Address)
		ret2 = new([]common.Address)
		ret3 = new(uint8)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Bridge.contract.Call(opts, out, "getCurrentRelayerThresholdProposal")
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCallerSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCaller) GetDepositProposal(opts *bind.CallOpts, destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	var (
		ret0 = new(BridgeDepositProposal)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getDepositProposal", destinationChainID, depositNonce)
	return *ret0, err
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeSession) GetDepositProposal(destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCallerSession) GetDepositProposal(destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactor) CreateRelayerThresholdProposal(opts *bind.TransactOpts, proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "createRelayerThresholdProposal", proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactorSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) Deposit(destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteDepositProposal(opts *bind.TransactOpts, originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeDepositProposal", originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) ExecuteDepositProposal(originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteDepositProposal(originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xa9b0b0fe.
//
// Solidity: function voteDepositProposal(uint256 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactor) VoteDepositProposal(opts *bind.TransactOpts, originChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteDepositProposal", originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xa9b0b0fe.
//
// Solidity: function voteDepositProposal(uint256 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeSession) VoteDepositProposal(originChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xa9b0b0fe.
//
// Solidity: function voteDepositProposal(uint256 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactorSession) VoteDepositProposal(originChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactor) VoteRelayerThresholdProposal(opts *bind.TransactOpts, vote uint8) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteRelayerThresholdProposal", vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactorSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	OriginChainID             *big.Int
	DestinationChainID        *big.Int
	OriginChainHandlerAddress common.Address
	DepositNonce              *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f0476959.
//
// Solidity: event Deposit(uint256 indexed originChainID, uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 depositNonce)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, originChainHandlerAddress []common.Address) (*BridgeDepositIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", originChainIDRule, destinationChainIDRule, originChainHandlerAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f0476959.
//
// Solidity: event Deposit(uint256 indexed originChainID, uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 depositNonce)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, originChainID []*big.Int, destinationChainID []*big.Int, originChainHandlerAddress []common.Address) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", originChainIDRule, destinationChainIDRule, originChainHandlerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f0476959.
//
// Solidity: event Deposit(uint256 indexed originChainID, uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 depositNonce)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalCreatedIterator is returned from FilterDepositProposalCreated and is used to iterate over the raw logs and unpacked data for DepositProposalCreated events raised by the Bridge contract.
type BridgeDepositProposalCreatedIterator struct {
	Event *BridgeDepositProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalCreated represents a DepositProposalCreated event raised by the Bridge contract.
type BridgeDepositProposalCreated struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	DataHash           [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalCreated is a free log retrieval operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterDepositProposalCreated(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalCreatedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalCreatedIterator{contract: _Bridge.contract, event: "DepositProposalCreated", logs: logs, sub: sub}, nil
}

// WatchDepositProposalCreated is a free log subscription operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchDepositProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalCreated, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalCreated is a log parse operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseDepositProposalCreated(log types.Log) (*BridgeDepositProposalCreated, error) {
	event := new(BridgeDepositProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalExecutedIterator is returned from FilterDepositProposalExecuted and is used to iterate over the raw logs and unpacked data for DepositProposalExecuted events raised by the Bridge contract.
type BridgeDepositProposalExecutedIterator struct {
	Event *BridgeDepositProposalExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalExecuted represents a DepositProposalExecuted event raised by the Bridge contract.
type BridgeDepositProposalExecuted struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalExecuted is a free log retrieval operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalExecuted(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalExecutedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalExecutedIterator{contract: _Bridge.contract, event: "DepositProposalExecuted", logs: logs, sub: sub}, nil
}

// WatchDepositProposalExecuted is a free log subscription operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalExecuted(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalExecuted, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalExecuted)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalExecuted is a log parse operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalExecuted(log types.Log) (*BridgeDepositProposalExecuted, error) {
	event := new(BridgeDepositProposalExecuted)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalFinalizedIterator is returned from FilterDepositProposalFinalized and is used to iterate over the raw logs and unpacked data for DepositProposalFinalized events raised by the Bridge contract.
type BridgeDepositProposalFinalizedIterator struct {
	Event *BridgeDepositProposalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalFinalized represents a DepositProposalFinalized event raised by the Bridge contract.
type BridgeDepositProposalFinalized struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalFinalized is a free log retrieval operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalFinalized(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalFinalizedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalFinalizedIterator{contract: _Bridge.contract, event: "DepositProposalFinalized", logs: logs, sub: sub}, nil
}

// WatchDepositProposalFinalized is a free log subscription operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalFinalized(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalFinalized, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalFinalized)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalFinalized is a log parse operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalFinalized(log types.Log) (*BridgeDepositProposalFinalized, error) {
	event := new(BridgeDepositProposalFinalized)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalVoteIterator is returned from FilterDepositProposalVote and is used to iterate over the raw logs and unpacked data for DepositProposalVote events raised by the Bridge contract.
type BridgeDepositProposalVoteIterator struct {
	Event *BridgeDepositProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalVote represents a DepositProposalVote event raised by the Bridge contract.
type BridgeDepositProposalVote struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Status             uint8
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalVote is a free log retrieval operation binding the contract event 0x5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b890.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) FilterDepositProposalVote(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalVoteIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalVoteIterator{contract: _Bridge.contract, event: "DepositProposalVote", logs: logs, sub: sub}, nil
}

// WatchDepositProposalVote is a free log subscription operation binding the contract event 0x5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b890.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) WatchDepositProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalVote, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalVote is a log parse operation binding the contract event 0x5c7c5147bfda6497e8738ff58fdd694308238f0b223e91cd24125c25e692b890.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) ParseDepositProposalVote(log types.Log) (*BridgeDepositProposalVote, error) {
	event := new(BridgeDepositProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalCreatedIterator is returned from FilterRelayerThresholdProposalCreated and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalCreated events raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreatedIterator struct {
	Event *BridgeRelayerThresholdProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalCreated represents a RelayerThresholdProposalCreated event raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreated struct {
	ProposedValue *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalCreated is a free log retrieval operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalCreated(opts *bind.FilterOpts, proposedValue []*big.Int) (*BridgeRelayerThresholdProposalCreatedIterator, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalCreatedIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalCreated", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalCreated is a free log subscription operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalCreated, proposedValue []*big.Int) (event.Subscription, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalCreated is a log parse operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalCreated(log types.Log) (*BridgeRelayerThresholdProposalCreated, error) {
	event := new(BridgeRelayerThresholdProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalVoteIterator is returned from FilterRelayerThresholdProposalVote and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalVote events raised by the Bridge contract.
type BridgeRelayerThresholdProposalVoteIterator struct {
	Event *BridgeRelayerThresholdProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalVote represents a RelayerThresholdProposalVote event raised by the Bridge contract.
type BridgeRelayerThresholdProposalVote struct {
	Vote uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalVote is a free log retrieval operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalVote(opts *bind.FilterOpts) (*BridgeRelayerThresholdProposalVoteIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalVoteIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalVote", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalVote is a free log subscription operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalVote) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalVote is a log parse operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalVote(log types.Log) (*BridgeRelayerThresholdProposalVote, error) {
	event := new(BridgeRelayerThresholdProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

var RuntimeBytecode = ""
