// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeDepositProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeDepositProposal struct {
	DataHash [32]byte
	YesVotes []common.Address
	NoVotes  []common.Address
	Status   uint8
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"relayerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"DepositProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"DepositProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"RelayerThresholdProposalVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposedValue\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositProposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnDepositProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerContract\",\"outputs\":[{\"internalType\":\"contractIRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDepositProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"getDepositProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"internalType\":\"structBridge.DepositProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"createRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = ""

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID uint8, relayerContract common.Address, initialRelayerThreshold *big.Int) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, chainID, relayerContract, initialRelayerThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint8)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_chainID")
	return *ret0, err
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint8)
func (_Bridge *BridgeSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint8)
func (_Bridge *BridgeCallerSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCaller) CurrentRelayerThresholdProposal(opts *bind.CallOpts) (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	ret := new(struct {
		ProposedValue *big.Int
		Status        uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_currentRelayerThresholdProposal")
	return *ret, err
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCallerSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) constant returns(uint256)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositCounts", arg0)
	return *ret0, err
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) constant returns(uint256)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) constant returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositProposals is a free data retrieval call binding the contract method 0x7820b222.
//
// Solidity: function _depositProposals(uint8 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCaller) DepositProposals(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	ret := new(struct {
		DataHash [32]byte
		Status   uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_depositProposals", arg0, arg1)
	return *ret, err
}

// DepositProposals is a free data retrieval call binding the contract method 0x7820b222.
//
// Solidity: function _depositProposals(uint8 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeSession) DepositProposals(arg0 uint8, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositProposals is a free data retrieval call binding the contract method 0x7820b222.
//
// Solidity: function _depositProposals(uint8 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCallerSession) DepositProposals(arg0 uint8, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0xce3d5784.
//
// Solidity: function _depositRecords(uint8 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositRecords", arg0, arg1)
	return *ret0, err
}

// DepositRecords is a free data retrieval call binding the contract method 0xce3d5784.
//
// Solidity: function _depositRecords(uint8 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeSession) DepositRecords(arg0 uint8, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0xce3d5784.
//
// Solidity: function _depositRecords(uint8 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCallerSession) DepositRecords(arg0 uint8, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x8ba3706a.
//
// Solidity: function _hasVotedOnDepositProposal(uint8 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnDepositProposal(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_hasVotedOnDepositProposal", arg0, arg1, arg2)
	return *ret0, err
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x8ba3706a.
//
// Solidity: function _hasVotedOnDepositProposal(uint8 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeSession) HasVotedOnDepositProposal(arg0 uint8, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x8ba3706a.
//
// Solidity: function _hasVotedOnDepositProposal(uint8 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnDepositProposal(arg0 uint8, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCaller) RelayerContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerContract")
	return *ret0, err
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCallerSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerThreshold")
	return *ret0, err
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() constant returns(uint256)
func (_Bridge *BridgeCaller) TotalDepositProposals(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_totalDepositProposals")
	return *ret0, err
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() constant returns(uint256)
func (_Bridge *BridgeSession) TotalDepositProposals() (*big.Int, error) {
	return _Bridge.Contract.TotalDepositProposals(&_Bridge.CallOpts)
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() constant returns(uint256)
func (_Bridge *BridgeCallerSession) TotalDepositProposals() (*big.Int, error) {
	return _Bridge.Contract.TotalDepositProposals(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCaller) GetCurrentRelayerThresholdProposal(opts *bind.CallOpts) (*big.Int, []common.Address, []common.Address, uint8, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]common.Address)
		ret2 = new([]common.Address)
		ret3 = new(uint8)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Bridge.contract.Call(opts, out, "getCurrentRelayerThresholdProposal")
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCallerSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xaca18b26.
//
// Solidity: function getDepositProposal(uint8 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCaller) GetDepositProposal(opts *bind.CallOpts, destinationChainID uint8, depositNonce *big.Int) (BridgeDepositProposal, error) {
	var (
		ret0 = new(BridgeDepositProposal)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getDepositProposal", destinationChainID, depositNonce)
	return *ret0, err
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xaca18b26.
//
// Solidity: function getDepositProposal(uint8 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeSession) GetDepositProposal(destinationChainID uint8, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xaca18b26.
//
// Solidity: function getDepositProposal(uint8 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCallerSession) GetDepositProposal(destinationChainID uint8, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactor) CreateRelayerThresholdProposal(opts *bind.TransactOpts, proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "createRelayerThresholdProposal", proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactorSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0x3e87ba3c.
//
// Solidity: function deposit(uint8 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationChainID uint8, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x3e87ba3c.
//
// Solidity: function deposit(uint8 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) Deposit(destinationChainID uint8, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x3e87ba3c.
//
// Solidity: function deposit(uint8 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationChainID uint8, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x478fa240.
//
// Solidity: function executeDepositProposal(uint8 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteDepositProposal(opts *bind.TransactOpts, originChainID uint8, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeDepositProposal", originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x478fa240.
//
// Solidity: function executeDepositProposal(uint8 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) ExecuteDepositProposal(originChainID uint8, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x478fa240.
//
// Solidity: function executeDepositProposal(uint8 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteDepositProposal(originChainID uint8, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xff6ae003.
//
// Solidity: function voteDepositProposal(uint8 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactor) VoteDepositProposal(opts *bind.TransactOpts, originChainID uint8, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteDepositProposal", originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xff6ae003.
//
// Solidity: function voteDepositProposal(uint8 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeSession) VoteDepositProposal(originChainID uint8, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xff6ae003.
//
// Solidity: function voteDepositProposal(uint8 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactorSession) VoteDepositProposal(originChainID uint8, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactor) VoteRelayerThresholdProposal(opts *bind.TransactOpts, vote uint8) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteRelayerThresholdProposal", vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactorSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	DestinationChainID        uint8
	OriginChainHandlerAddress common.Address
	DepositNonce              *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, destinationChainID []uint8, originChainHandlerAddress []common.Address, depositNonce []*big.Int) (*BridgeDepositIterator, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", destinationChainIDRule, originChainHandlerAddressRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, destinationChainID []uint8, originChainHandlerAddress []common.Address, depositNonce []*big.Int) (event.Subscription, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", destinationChainIDRule, originChainHandlerAddressRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalCreatedIterator is returned from FilterDepositProposalCreated and is used to iterate over the raw logs and unpacked data for DepositProposalCreated events raised by the Bridge contract.
type BridgeDepositProposalCreatedIterator struct {
	Event *BridgeDepositProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalCreated represents a DepositProposalCreated event raised by the Bridge contract.
type BridgeDepositProposalCreated struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	DataHash           [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalCreated is a free log retrieval operation binding the contract event 0x3cf2380ab0b4b694f36db8d3dc8d091a58b09ba7ef5fb8e1034f8ccb08374eba.
//
// Solidity: event DepositProposalCreated(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterDepositProposalCreated(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeDepositProposalCreatedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalCreatedIterator{contract: _Bridge.contract, event: "DepositProposalCreated", logs: logs, sub: sub}, nil
}

// WatchDepositProposalCreated is a free log subscription operation binding the contract event 0x3cf2380ab0b4b694f36db8d3dc8d091a58b09ba7ef5fb8e1034f8ccb08374eba.
//
// Solidity: event DepositProposalCreated(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchDepositProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalCreated, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalCreated is a log parse operation binding the contract event 0x3cf2380ab0b4b694f36db8d3dc8d091a58b09ba7ef5fb8e1034f8ccb08374eba.
//
// Solidity: event DepositProposalCreated(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseDepositProposalCreated(log types.Log) (*BridgeDepositProposalCreated, error) {
	event := new(BridgeDepositProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalExecutedIterator is returned from FilterDepositProposalExecuted and is used to iterate over the raw logs and unpacked data for DepositProposalExecuted events raised by the Bridge contract.
type BridgeDepositProposalExecutedIterator struct {
	Event *BridgeDepositProposalExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalExecuted represents a DepositProposalExecuted event raised by the Bridge contract.
type BridgeDepositProposalExecuted struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalExecuted is a free log retrieval operation binding the contract event 0x640ba3edbd745a745b6a269a81cb65a1b89988ab7e874ee1f55ac8e75b62e91a.
//
// Solidity: event DepositProposalExecuted(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalExecuted(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeDepositProposalExecutedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalExecutedIterator{contract: _Bridge.contract, event: "DepositProposalExecuted", logs: logs, sub: sub}, nil
}

// WatchDepositProposalExecuted is a free log subscription operation binding the contract event 0x640ba3edbd745a745b6a269a81cb65a1b89988ab7e874ee1f55ac8e75b62e91a.
//
// Solidity: event DepositProposalExecuted(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalExecuted(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalExecuted, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalExecuted)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalExecuted is a log parse operation binding the contract event 0x640ba3edbd745a745b6a269a81cb65a1b89988ab7e874ee1f55ac8e75b62e91a.
//
// Solidity: event DepositProposalExecuted(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalExecuted(log types.Log) (*BridgeDepositProposalExecuted, error) {
	event := new(BridgeDepositProposalExecuted)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalFinalizedIterator is returned from FilterDepositProposalFinalized and is used to iterate over the raw logs and unpacked data for DepositProposalFinalized events raised by the Bridge contract.
type BridgeDepositProposalFinalizedIterator struct {
	Event *BridgeDepositProposalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalFinalized represents a DepositProposalFinalized event raised by the Bridge contract.
type BridgeDepositProposalFinalized struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalFinalized is a free log retrieval operation binding the contract event 0x1c08c42c3aaddc0b858614077f65d320290b2be47c2e837005e199e921184ff5.
//
// Solidity: event DepositProposalFinalized(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalFinalized(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeDepositProposalFinalizedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalFinalizedIterator{contract: _Bridge.contract, event: "DepositProposalFinalized", logs: logs, sub: sub}, nil
}

// WatchDepositProposalFinalized is a free log subscription operation binding the contract event 0x1c08c42c3aaddc0b858614077f65d320290b2be47c2e837005e199e921184ff5.
//
// Solidity: event DepositProposalFinalized(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalFinalized(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalFinalized, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalFinalized)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalFinalized is a log parse operation binding the contract event 0x1c08c42c3aaddc0b858614077f65d320290b2be47c2e837005e199e921184ff5.
//
// Solidity: event DepositProposalFinalized(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalFinalized(log types.Log) (*BridgeDepositProposalFinalized, error) {
	event := new(BridgeDepositProposalFinalized)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalVoteIterator is returned from FilterDepositProposalVote and is used to iterate over the raw logs and unpacked data for DepositProposalVote events raised by the Bridge contract.
type BridgeDepositProposalVoteIterator struct {
	Event *BridgeDepositProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalVote represents a DepositProposalVote event raised by the Bridge contract.
type BridgeDepositProposalVote struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	Status             uint8
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalVote is a free log retrieval operation binding the contract event 0x9303f7ba0a914d8845f7d7f02b6ceb8cc2c254ee29400249d83a7c927bdfc91b.
//
// Solidity: event DepositProposalVote(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) FilterDepositProposalVote(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeDepositProposalVoteIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalVoteIterator{contract: _Bridge.contract, event: "DepositProposalVote", logs: logs, sub: sub}, nil
}

// WatchDepositProposalVote is a free log subscription operation binding the contract event 0x9303f7ba0a914d8845f7d7f02b6ceb8cc2c254ee29400249d83a7c927bdfc91b.
//
// Solidity: event DepositProposalVote(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) WatchDepositProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalVote, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalVote is a log parse operation binding the contract event 0x9303f7ba0a914d8845f7d7f02b6ceb8cc2c254ee29400249d83a7c927bdfc91b.
//
// Solidity: event DepositProposalVote(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) ParseDepositProposalVote(log types.Log) (*BridgeDepositProposalVote, error) {
	event := new(BridgeDepositProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalCreatedIterator is returned from FilterRelayerThresholdProposalCreated and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalCreated events raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreatedIterator struct {
	Event *BridgeRelayerThresholdProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalCreated represents a RelayerThresholdProposalCreated event raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreated struct {
	ProposedValue *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalCreated is a free log retrieval operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalCreated(opts *bind.FilterOpts, proposedValue []*big.Int) (*BridgeRelayerThresholdProposalCreatedIterator, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalCreatedIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalCreated", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalCreated is a free log subscription operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalCreated, proposedValue []*big.Int) (event.Subscription, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalCreated is a log parse operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalCreated(log types.Log) (*BridgeRelayerThresholdProposalCreated, error) {
	event := new(BridgeRelayerThresholdProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalVoteIterator is returned from FilterRelayerThresholdProposalVote and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalVote events raised by the Bridge contract.
type BridgeRelayerThresholdProposalVoteIterator struct {
	Event *BridgeRelayerThresholdProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalVote represents a RelayerThresholdProposalVote event raised by the Bridge contract.
type BridgeRelayerThresholdProposalVote struct {
	Vote uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalVote is a free log retrieval operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalVote(opts *bind.FilterOpts) (*BridgeRelayerThresholdProposalVoteIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalVoteIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalVote", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalVote is a free log subscription operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalVote) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalVote is a log parse operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalVote(log types.Log) (*BridgeRelayerThresholdProposalVote, error) {
	event := new(BridgeRelayerThresholdProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

var RuntimeBytecode = "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063beab713111610097578063e9cdaead11610066578063e9cdaead146102c5578063ea059625146102e1578063fe612136146102ff578063ff6ae0031461031e57610100565b8063beab71311461023d578063ce3d57841461025b578063d7a9cd791461028b578063df269060146102a957610100565b80635f31b69c116100d35780635f31b69c1461018b5780637820b222146101ac5780638ba3706a146101dd578063aca18b261461020d57610100565b806306899ca4146101055780633e87ba3c14610123578063478fa2401461013f5780634b0b919d1461015b575b600080fd5b61010d61033a565b60405161011a9190612a31565b60405180910390f35b61013d60048036038101906101389190611f11565b610340565b005b61015960048036038101906101549190612003565b61046e565b005b61017560048036038101906101709190611ee8565b6106c0565b6040516101829190612a31565b60405180910390f35b6101936106d8565b6040516101a39493929190612a4c565b60405180910390f35b6101c660048036038101906101c19190611f78565b61081f565b6040516101d49291906127cf565b60405180910390f35b6101f760048036038101906101f29190611fb4565b61085d565b6040516102049190612799565b60405180910390f35b61022760048036038101906102229190611f78565b610899565b6040516102349190612a0f565b60405180910390f35b610245610a31565b6040516102529190612ac8565b60405180910390f35b61027560048036038101906102709190611f78565b610a43565b60405161028291906127f8565b60405180910390f35b610293610b00565b6040516102a09190612a31565b60405180910390f35b6102c360048036038101906102be9190611e96565b610b06565b005b6102df60048036038101906102da9190611e6d565b610f92565b005b6102e96114bb565b6040516102f6919061283c565b60405180910390f35b6103076114e1565b604051610315929190612a9f565b60405180910390f35b6103386004803603810190610333919061207e565b611500565b005b60075481565b6000600860008560ff1660ff16815260200190815260200160002060008154600101919050819055905081600960008660ff1660ff168152602001908152602001600020600083815260200190815260200160002090805190602001906103a8929190611bb5565b5060008390508073ffffffffffffffffffffffffffffffffffffffff166345a104db868433876040518563ffffffff1660e01b81526004016103ed9493929190612ae3565b600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b50505050818473ffffffffffffffffffffffffffffffffffffffff168660ff167f47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe60405160405180910390a45050505050565b6000600a60008660ff1660ff16815260200190815260200160002060008581526020019081526020016000209050600060038111156104a957fe5b8160030160009054906101000a900460ff1660038111156104c657fe5b1415610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fe906128af565b60405180910390fd5b6002600381111561051457fe5b8160030160009054906101000a900460ff16600381111561053157fe5b14610571576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105689061298f565b60405180910390fd5b80600001548383604051602001610589929190612756565b60405160208183030381529060405280519060200120146105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d69061292f565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b815260040161061d919061281a565b600060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b5050505060038260030160006101000a81548160ff0219169083600381111561067057fe5b0217905550846000809054906101000a900460ff1660ff168760ff167f640ba3edbd745a745b6a269a81cb65a1b89988ab7e874ee1f55ac8e75b62e91a60405160405180910390a4505050505050565b60086020528060005260406000206000915090505481565b60006060806000600260000154600280016002600301600260040160009054906101000a900460ff168280548060200260200160405190810160405280929190818152602001828054801561078257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610738575b505050505092508180548060200260200160405190810160405280929190818152602001828054801561080a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107c0575b50505050509150935093509350935090919293565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b600b602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b6108a1611c35565b600a60008460ff1660ff1681526020019081526020016000206000838152602001908152602001600020604051806080016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561096557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161091b575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156109f357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109a9575b505050505081526020016003820160009054906101000a900460ff166003811115610a1a57fe5b6003811115610a2557fe5b81525050905092915050565b6000809054906101000a900460ff1681565b6009602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610af85780601f10610acd57610100808354040283529160200191610af8565b820191906000526020600020905b815481529060010190602001808311610adb57829003601f168201915b505050505081565b60015481565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b8152600401610b65919061277e565b602060405180830381600087803b158015610b7f57600080fd5b505af1158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611e44565b610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed906129af565b60405180910390fd5b60006001811115610c0357fe5b600260040160009054906101000a900460ff166001811115610c2157fe5b14610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c58906129cf565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ccb57600080fd5b505af1158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d039190611ebf565b821115610d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3c906128ef565b60405180910390fd5b60405180608001604052808381526020016001604051908082528060200260200182016040528015610d865781602001602082028036833780820191505090505b5081526020016000604051908082528060200260200182016040528015610dbc5781602001602082028036833780820191505090505b508152602001600180811115610dce57fe5b8152506002600082015181600001556020820151816002019080519060200190610df9929190611c6b565b506040820151816003019080519060200190610e16929190611c6b565b5060608201518160040160006101000a81548160ff02191690836001811115610e3b57fe5b02179055509050506001805411610ead576002600001546001819055506000600260040160006101000a81548160ff02191690836001811115610e7a57fe5b0217905550817fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a25b3360028001600081548110610ebe57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550817f79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d60405160405180910390a25050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b8152600401610ff1919061277e565b602060405180830381600087803b15801561100b57600080fd5b505af115801561101f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110439190611e44565b611082576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611079906129af565b60405180910390fd5b60018081111561108e57fe5b600260040160009054906101000a900460ff1660018111156110ac57fe5b146110ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e39061294f565b60405180910390fd5b600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561117c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111739061290f565b60405180910390fd5b600182600181111561118a57fe5b60ff1611156111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c5906129ef565b60405180910390fd5b6001808111156111da57fe5b8260018111156111e657fe5b14156112565760028001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112bd565b6002600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600260010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1826040516113479190612872565b60405180910390a16001546002800180549050106113c9576002600001546001819055506000600260040160006101000a81548160ff0219169083600181111561138d57fe5b02179055506002600001547fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a26114b7565b600154611488600260030180549050600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561144257600080fd5b505af1158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190611ebf565b611b1090919063ffffffff16565b10156114b6576000600260040160006101000a81548160ff021916908360018111156114b057fe5b02179055505b5b5050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028060000154908060040160009054906101000a900460ff16905082565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b815260040161155f919061277e565b602060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b19190611e44565b6115f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e7906129af565b60405180910390fd5b6000600a60008660ff1660ff1681526020019081526020016000206000858152602001908152602001600020905060018160030160009054906101000a900460ff16600381111561163d57fe5b111561167e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116759061296f565b60405180910390fd5b600b60008660ff1660ff168152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a906128cf565b60405180910390fd5b60008160030160009054906101000a900460ff16600381111561175257fe5b141561193b5760076000815460010191905081905550604051806080016040528084815260200160016040519080825280602002602001820160405280156117a95781602001602082028036833780820191505090505b50815260200160006040519080825280602002602001820160405280156117df5781602001602082028036833780820191505090505b508152602001600160038111156117f257fe5b815250600a60008760ff1660ff1681526020019081526020016000206000868152602001908152602001600020600082015181600001556020820151816001019080519060200190611845929190611c6b565b506040820151816002019080519060200190611862929190611c6b565b5060608201518160030160006101000a81548160ff0219169083600381111561188757fe5b021790555090505033816001016000815481106118a057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000809054906101000a900460ff1660ff168660ff167f3cf2380ab0b4b694f36db8d3dc8d091a58b09ba7ef5fb8e1034f8ccb08374eba8660405161192e91906127b4565b60405180910390a46119a1565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600b60008760ff1660ff168152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550836000809054906101000a900460ff1660ff168660ff167f9303f7ba0a914d8845f7d7f02b6ceb8cc2c254ee29400249d83a7c927bdfc91b8460030160009054906101000a900460ff16604051611a789190612857565b60405180910390a460018054111580611a9a5750600154816001018054905010155b15611b095760028160030160006101000a81548160ff02191690836003811115611ac057fe5b0217905550836000809054906101000a900460ff1660ff168660ff167f1c08c42c3aaddc0b858614077f65d320290b2be47c2e837005e199e921184ff560405160405180910390a45b5050505050565b6000611b5283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611b5a565b905092915050565b6000838311158290611ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b99919061288d565b60405180910390fd5b5060008385039050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611bf657805160ff1916838001178555611c24565b82800160010185558215611c24579182015b82811115611c23578251825591602001919060010190611c08565b5b509050611c319190611cf5565b5090565b604051806080016040528060008019168152602001606081526020016060815260200160006003811115611c6557fe5b81525090565b828054828255906000526020600020908101928215611ce4579160200282015b82811115611ce35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611c8b565b5b509050611cf19190611d1a565b5090565b611d1791905b80821115611d13576000816000905550600101611cfb565b5090565b90565b611d5a91905b80821115611d5657600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611d20565b5090565b90565b600081359050611d6c81612e1b565b92915050565b600081519050611d8181612e32565b92915050565b600081359050611d9681612e49565b92915050565b600082601f830112611dad57600080fd5b8135611dc0611dbb82612b5c565b612b2f565b91508082526020830160208301858383011115611ddc57600080fd5b611de7838284612d70565b50505092915050565b600081359050611dff81612e60565b92915050565b600081359050611e1481612e70565b92915050565b600081519050611e2981612e70565b92915050565b600081359050611e3e81612e87565b92915050565b600060208284031215611e5657600080fd5b6000611e6484828501611d72565b91505092915050565b600060208284031215611e7f57600080fd5b6000611e8d84828501611df0565b91505092915050565b600060208284031215611ea857600080fd5b6000611eb684828501611e05565b91505092915050565b600060208284031215611ed157600080fd5b6000611edf84828501611e1a565b91505092915050565b600060208284031215611efa57600080fd5b6000611f0884828501611e2f565b91505092915050565b600080600060608486031215611f2657600080fd5b6000611f3486828701611e2f565b9350506020611f4586828701611d5d565b925050604084013567ffffffffffffffff811115611f6257600080fd5b611f6e86828701611d9c565b9150509250925092565b60008060408385031215611f8b57600080fd5b6000611f9985828601611e2f565b9250506020611faa85828601611e05565b9150509250929050565b600080600060608486031215611fc957600080fd5b6000611fd786828701611e2f565b9350506020611fe886828701611e05565b9250506040611ff986828701611d5d565b9150509250925092565b6000806000806080858703121561201957600080fd5b600061202787828801611e2f565b945050602061203887828801611e05565b935050604061204987828801611d5d565b925050606085013567ffffffffffffffff81111561206657600080fd5b61207287828801611d9c565b91505092959194509250565b60008060006060848603121561209357600080fd5b60006120a186828701611e2f565b93505060206120b286828701611e05565b92505060406120c386828701611d87565b9150509250925092565b60006120d983836120f4565b60208301905092915050565b6120ee81612ce0565b82525050565b6120fd81612c48565b82525050565b61211461210f82612c48565b612db2565b82525050565b600061212582612bb3565b61212f8185612c0a565b935061213a83612b98565b8060005b8381101561216b57815161215288826120cd565b975061215d83612bec565b92505060018101905061213e565b5085935050505092915050565b600061218382612ba8565b61218d8185612bf9565b935061219883612b88565b8060005b838110156121c95781516121b088826120cd565b97506121bb83612bdf565b92505060018101905061219c565b5085935050505092915050565b6121df81612c5a565b82525050565b6121ee81612c66565b82525050565b6121fd81612c66565b82525050565b600061220e82612bc9565b6122188185612c1b565b9350612228818560208601612d7f565b61223181612dd6565b840191505092915050565b600061224782612bc9565b6122518185612c2c565b9350612261818560208601612d7f565b80840191505092915050565b600061227882612bbe565b6122828185612c1b565b9350612292818560208601612d7f565b61229b81612dd6565b840191505092915050565b6122af81612cf2565b82525050565b6122be81612d16565b82525050565b6122cd81612d16565b82525050565b6122dc81612d28565b82525050565b6122eb81612d3a565b82525050565b60006122fc82612bd4565b6123068185612c37565b9350612316818560208601612d7f565b61231f81612dd6565b840191505092915050565b6000612337601683612c37565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b6000612377602583612c37565b91507f72656c617965722068617320616c726561647920766f746564206f6e2070726f60008301527f706f73616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006123dd604283612c37565b91507f70726f706f7365642076616c75652063616e6e6f74206265206772656174657260008301527f207468616e2074686520746f74616c206e756d626572206f662072656c61796560208301527f72730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000612469601983612c37565b91507f72656c617965722068617320616c726561647920766f746564000000000000006000830152602082019050919050565b60006124a9603183612c37565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b600061250f601f83612c37565b91507f6e6f2070726f706f73616c2069732063757272656e746c7920616374697665006000830152602082019050919050565b600061254f602f83612c37565b91507f70726f706f73616c2068617320616c7265616479206265656e2070617373656460008301527f206f72207472616e7366657272656400000000000000000000000000000000006020830152604082019050919050565b60006125b5603783612c37565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b600061261b601883612c37565b91507f73656e646572206d75737420626520612072656c6179657200000000000000006000830152602082019050919050565b600061265b601e83612c37565b91507f612070726f706f73616c2069732063757272656e746c792061637469766500006000830152602082019050919050565b600061269b601f83612c37565b91507f766f7465206f7574206f662074686520766f746520656e756d2072616e6765006000830152602082019050919050565b60006080830160008301516126e660008601826121e5565b50602083015184820360208601526126fe8282612178565b915050604083015184820360408601526127188282612178565b915050606083015161272d60608601826122b5565b508091505092915050565b61274181612cc9565b82525050565b61275081612cd3565b82525050565b60006127628285612103565b601482019150612772828461223c565b91508190509392505050565b600060208201905061279360008301846120e5565b92915050565b60006020820190506127ae60008301846121d6565b92915050565b60006020820190506127c960008301846121f4565b92915050565b60006040820190506127e460008301856121f4565b6127f160208301846122c4565b9392505050565b60006020820190508181036000830152612812818461226d565b905092915050565b600060208201905081810360008301526128348184612203565b905092915050565b600060208201905061285160008301846122a6565b92915050565b600060208201905061286c60008301846122c4565b92915050565b600060208201905061288760008301846122e2565b92915050565b600060208201905081810360008301526128a781846122f1565b905092915050565b600060208201905081810360008301526128c88161232a565b9050919050565b600060208201905081810360008301526128e88161236a565b9050919050565b60006020820190508181036000830152612908816123d0565b9050919050565b600060208201905081810360008301526129288161245c565b9050919050565b600060208201905081810360008301526129488161249c565b9050919050565b6000602082019050818103600083015261296881612502565b9050919050565b6000602082019050818103600083015261298881612542565b9050919050565b600060208201905081810360008301526129a8816125a8565b9050919050565b600060208201905081810360008301526129c88161260e565b9050919050565b600060208201905081810360008301526129e88161264e565b9050919050565b60006020820190508181036000830152612a088161268e565b9050919050565b60006020820190508181036000830152612a2981846126ce565b905092915050565b6000602082019050612a466000830184612738565b92915050565b6000608082019050612a616000830187612738565b8181036020830152612a73818661211a565b90508181036040830152612a87818561211a565b9050612a9660608301846122d3565b95945050505050565b6000604082019050612ab46000830185612738565b612ac160208301846122d3565b9392505050565b6000602082019050612add6000830184612747565b92915050565b6000608082019050612af86000830187612747565b612b056020830186612738565b612b1260408301856120e5565b8181036060830152612b248184612203565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715612b5257600080fd5b8060405250919050565b600067ffffffffffffffff821115612b7357600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612c5382612ca9565b9050919050565b60008115159050919050565b6000819050919050565b6000819050612c7e82612df4565b919050565b6000819050612c9182612e01565b919050565b6000819050612ca482612e0e565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612ceb82612d4c565b9050919050565b6000612cfd82612d04565b9050919050565b6000612d0f82612ca9565b9050919050565b6000612d2182612c70565b9050919050565b6000612d3382612c83565b9050919050565b6000612d4582612c96565b9050919050565b6000612d5782612d5e565b9050919050565b6000612d6982612ca9565b9050919050565b82818337600083830152505050565b60005b83811015612d9d578082015181840152602081019050612d82565b83811115612dac576000848401525b50505050565b6000612dbd82612dc4565b9050919050565b6000612dcf82612de7565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b60048110612dfe57fe5b50565b60028110612e0b57fe5b50565b60028110612e1857fe5b50565b612e2481612c48565b8114612e2f57600080fd5b50565b612e3b81612c5a565b8114612e4657600080fd5b50565b612e5281612c66565b8114612e5d57600080fd5b50565b60028110612e6d57600080fd5b50565b612e7981612cc9565b8114612e8457600080fd5b50565b612e9081612cd3565b8114612e9b57600080fd5b5056fea2646970667358221220139f61ca3e9abd98c36a77ce70a23a837c08acc1cab79db76f9802ada8bb8c0a64736f6c63430006040033"
