// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeDepositProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeDepositProposal struct {
	DataHash [32]byte
	YesVotes []common.Address
	NoVotes  []common.Address
	Status   uint8
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"ProposalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositProposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnDepositProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDepositProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResourceIDAndContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetResourceIdInGenericHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"getDepositProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"internalType\":\"structBridge.DepositProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b50604051620038a9380380620038a98339818101604052810190620000379190620004ac565b60008060006101000a81548160ff02191690831515021790555082600260006101000a81548160ff021916908360ff16021790555080600381905550620000886000801b336200012460201b60201c565b620000b26040516200009a90620005c5565b60405180910390206000801b6200013a60201b60201c565b60005b82518110156200011a57620000fa604051620000d190620005c5565b6040518091039020848381518110620000e657fe5b60200260200101516200015960201b60201c565b6004600081548092919060010191905055508080600101915050620000b5565b505050506200070a565b620001368282620001e860201b60201c565b5050565b8060016000848152602001908152602001600020600201819055505050565b620001906001600084815260200190815260200160002060020154620001846200028c60201b60201c565b6200029460201b60201c565b620001d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c990620005dc565b60405180910390fd5b620001e48282620001e860201b60201c565b5050565b620002178160016000858152602001908152602001600020600001620002cd60201b62001be51790919060201c565b1562000288576200022d6200028c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6000620002c582600160008681526020019081526020016000206000016200030560201b62001af81790919060201c565b905092915050565b6000620002fd836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200033d60201b60201c565b905092915050565b600062000335836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003b760201b60201c565b905092915050565b6000620003518383620003b760201b60201c565b620003ac578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620003b1565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620003eb81620006bc565b92915050565b600082601f8301126200040357600080fd5b81516200041a62000414826200062c565b620005fe565b915081818352602084019350602081019050838560208402820111156200044057600080fd5b60005b83811015620004745781620004598882620003da565b84526020840193506020830192505060018101905062000443565b5050505092915050565b6000815190506200048f81620006d6565b92915050565b600081519050620004a681620006f0565b92915050565b600080600060608486031215620004c257600080fd5b6000620004d28682870162000495565b935050602084015167ffffffffffffffff811115620004f057600080fd5b620004fe86828701620003f1565b925050604062000511868287016200047e565b9150509250925092565b60006200052a602f8362000655565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b600062000592600c8362000666565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b6000620005d28262000583565b9150819050919050565b60006020820190508181036000830152620005f7816200051b565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200062257600080fd5b8060405250919050565b600067ffffffffffffffff8211156200064457600080fd5b602082029050602081019050919050565b600082825260208201905092915050565b600081905092915050565b60006200067e8262000685565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b620006c78162000671565b8114620006d357600080fd5b50565b620006e181620006a5565b8114620006ed57600080fd5b50565b620006fb81620006af565b81146200070757600080fd5b50565b61318f806200071a6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638c0c26311161010f578063beab7131116100a2578063d547741f11610071578063d547741f146105c8578063d7a9cd79146105e4578063ff6ae00314610602578063ffaac0eb1461061e576101f0565b8063beab71311461052e578063ca15c8731461054c578063cdb0f73a1461057c578063ce3d578414610598576101f0565b80639d82dd63116100de5780639d82dd63146104a8578063a217fddf146104c4578063aca18b26146104e2578063b419ee0614610512576101f0565b80638c0c26311461040e5780639010d07c1461042a57806391d148541461045a578063926d7d7f1461048a576101f0565b8063541d5548116101875780637820b222116101565780637820b22214610385578063802aabe8146103b657806380ae1c28146103d45780638ba3706a146103de576101f0565b8063541d5548146102ff57806359f4206a1461032f5780635c975abb1461034b5780635e1fab0f14610369576101f0565b80633e87ba3c116101c35780633e87ba3c1461027b578063478fa240146102975780634b0b919d146102b35780634e056005146102e3576101f0565b806306899ca4146101f5578063248a9ca3146102135780632f2ff15d1461024357806336568abe1461025f575b600080fd5b6101fd610628565b60405161020a9190612e0d565b60405180910390f35b61022d600480360381019061022891906121ce565b61062e565b60405161023a9190612b7a565b60405180910390f35b61025d600480360381019061025891906121f7565b61064e565b005b610279600480360381019061027491906121f7565b6106c2565b005b610295600480360381019061029091906122c1565b610745565b005b6102b160048036038101906102ac91906123b3565b6108c2565b005b6102cd60048036038101906102c89190612298565b610b8a565b6040516102da9190612e0d565b60405180910390f35b6102fd60048036038101906102f8919061226f565b610ba2565b005b610319600480360381019061031491906120a3565b610bef565b6040516103269190612b5f565b60405180910390f35b61034960048036038101906103449190612157565b610c15565b005b610353610ca9565b6040516103609190612b5f565b60405180910390f35b610383600480360381019061037e91906120a3565b610cbf565b005b61039f600480360381019061039a9190612328565b610cf2565b6040516103ad929190612c03565b60405180910390f35b6103be610d30565b6040516103cb9190612e0d565b60405180910390f35b6103dc610d36565b005b6103f860048036038101906103f39190612364565b610d56565b6040516104059190612b5f565b60405180910390f35b610428600480360381019061042391906120cc565b610d92565b005b610444600480360381019061043f9190612233565b610e1d565b6040516104519190612b29565b60405180910390f35b610474600480360381019061046f91906121f7565b610e4f565b6040516104819190612b5f565b60405180910390f35b610492610e81565b60405161049f9190612b7a565b60405180910390f35b6104c260048036038101906104bd91906120a3565b610e98565b005b6104cc610f24565b6040516104d99190612b7a565b60405180910390f35b6104fc60048036038101906104f79190612328565b610f2b565b6040516105099190612deb565b60405180910390f35b61052c60048036038101906105279190612108565b6110c3565b005b610536611151565b6040516105439190612e28565b60405180910390f35b610566600480360381019061056191906121ce565b611164565b6040516105739190612e0d565b60405180910390f35b610596600480360381019061059191906120a3565b61118b565b005b6105b260048036038101906105ad9190612328565b611216565b6040516105bf9190612c2c565b60405180910390f35b6105e260048036038101906105dd91906121f7565b6112d3565b005b6105ec611347565b6040516105f99190612e0d565b60405180910390f35b61061c6004803603810190610617919061242e565b61134d565b005b6106266118e5565b005b60055481565b600060016000838152602001908152602001600020600201549050919050565b6106756001600084815260200190815260200160002060020154610670611905565b610e4f565b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90612ccb565b60405180910390fd5b6106be828261190d565b5050565b6106ca611905565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e90612dcb565b60405180910390fd5b61074182826119a1565b5050565b6000809054906101000a900460ff1615610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078b90612d4b565b60405180910390fd5b6000600660008560ff1660ff16815260200190815260200160002060008154600101919050819055905081600760008660ff1660ff168152602001908152602001600020600083815260200190815260200160002090805190602001906107fc929190611e3e565b5060008390508073ffffffffffffffffffffffffffffffffffffffff166345a104db868433876040518563ffffffff1660e01b81526004016108419493929190612e43565b600060405180830381600087803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b50505050818473ffffffffffffffffffffffffffffffffffffffff168660ff167f47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe60405160405180910390a45050505050565b6108df6040516108d190612b14565b604051809103902033610e4f565b6108e857600080fd5b6000809054906101000a900460ff1615610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e90612d4b565b60405180910390fd5b6000600860008660ff1660ff168152602001908152602001600020600085815260200190815260200160002090506000600381111561097257fe5b8160030160009054906101000a900460ff16600381111561098f57fe5b14156109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c790612c8b565b60405180910390fd5b600260038111156109dd57fe5b8160030160009054906101000a900460ff1660038111156109fa57fe5b14610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190612dab565b60405180910390fd5b80600001548383604051602001610a52929190612aec565b6040516020818303038152906040528051906020012014610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90612d6b565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b8152600401610ae69190612c4e565b600060405180830381600087803b158015610b0057600080fd5b505af1158015610b14573d6000803e3d6000fd5b5050505060038260030160006101000a81548160ff02191690836003811115610b3957fe5b021790555084600260009054906101000a900460ff1660ff168760ff167fa5c8f3b7dbf19ce2d73c2641a6b4a360c9011cd3ae7f6d12e0454fe81570dc3060405160405180910390a4505050505050565b60066020528060005260406000206000915090505481565b610baf6000801b33610e4f565b610bb857600080fd5b80600381905550807fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a250565b6000610c0e604051610c0090612b14565b604051809103902083610e4f565b9050919050565b610c226000801b33610e4f565b610c2b57600080fd5b60008590508073ffffffffffffffffffffffffffffffffffffffff1663bba8185a868686866040518563ffffffff1660e01b8152600401610c6f9493929190612bbe565b600060405180830381600087803b158015610c8957600080fd5b505af1158015610c9d573d6000803e3d6000fd5b50505050505050505050565b60008060009054906101000a900460ff16905090565b610ccc6000801b33610e4f565b610cd557600080fd5b610ce26000801b8261064e565b610cef6000801b336106c2565b50565b6008602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60045481565b610d436000801b33610e4f565b610d4c57600080fd5b610d54611a35565b565b6009602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b610d9f6000801b33610e4f565b610da857600080fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b8152600401610de69190612b29565b600060405180830381600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b50505050505050565b6000610e478260016000868152602001908152602001600020600001611ade90919063ffffffff16565b905092915050565b6000610e798260016000868152602001908152602001600020600001611af890919063ffffffff16565b905092915050565b604051610e8d90612b14565b604051809103902081565b610ea56000801b33610e4f565b610eae57600080fd5b610ecb604051610ebd90612b14565b6040518091039020826112d3565b8073ffffffffffffffffffffffffffffffffffffffff167f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b60405160405180910390a26004600081548092919060019003919050555050565b6000801b81565b610f33611ebe565b600860008460ff1660ff16815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ff757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fad575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561108557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161103b575b505050505081526020016003820160009054906101000a900460ff1660038111156110ac57fe5b60038111156110b757fe5b81525050905092915050565b6110d06000801b33610e4f565b6110d957600080fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff16638a025ce884846040518363ffffffff1660e01b8152600401611119929190612b95565b600060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b5050505050505050565b600260009054906101000a900460ff1681565b600061118460016000848152602001908152602001600020600001611b28565b9050919050565b6111986000801b33610e4f565b6111a157600080fd5b6111be6040516111b090612b14565b60405180910390208261064e565b8073ffffffffffffffffffffffffffffffffffffffff167f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c560405160405180910390a260046000815480929190600101919050555050565b6007602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112cb5780601f106112a0576101008083540402835291602001916112cb565b820191906000526020600020905b8154815290600101906020018083116112ae57829003601f168201915b505050505081565b6112fa60016000848152602001908152602001600020600201546112f5611905565b610e4f565b611339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133090612d2b565b60405180910390fd5b61134382826119a1565b5050565b60035481565b61136a60405161135c90612b14565b604051809103902033610e4f565b61137357600080fd5b6000809054906101000a900460ff16156113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b990612d4b565b60405180910390fd5b6000600860008560ff1660ff1681526020019081526020016000206000848152602001908152602001600020905060018160030160009054906101000a900460ff16600381111561140f57fe5b1115611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612d8b565b60405180910390fd5b600960008560ff1660ff168152602001908152602001600020600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc90612d0b565b60405180910390fd5b60008160030160009054906101000a900460ff16600381111561152457fe5b141561170e57600560008154600101919050819055506040518060800160405280838152602001600160405190808252806020026020018201604052801561157b5781602001602082028036833780820191505090505b50815260200160006040519080825280602002602001820160405280156115b15781602001602082028036833780820191505090505b508152602001600160038111156115c457fe5b815250600860008660ff1660ff1681526020019081526020016000206000858152602001908152602001600020600082015181600001556020820151816001019080519060200190611617929190611ef4565b506040820151816002019080519060200190611634929190611ef4565b5060608201518160030160006101000a81548160ff0219169083600381111561165957fe5b0217905550905050338160010160008154811061167257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260009054906101000a900460ff1660ff168560ff167f194898110d0d38ea3cd7aa3fa939f87bb9bbad8427482df365d5ecc36b743805856040516117019190612b7a565b60405180910390a4611774565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600960008660ff1660ff168152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082600260009054906101000a900460ff1660ff168560ff167fc954da58dd7f8bea0c2f55f3f557dc861271ad571074e3b417749eff0af46aab8460030160009054906101000a900460ff1660405161184c9190612c70565b60405180910390a4600160035411158061186f5750600354816001018054905010155b156118df5760028160030160006101000a81548160ff0219169083600381111561189557fe5b021790555082600260009054906101000a900460ff1660ff168560ff167f0da2fadf3d07092b7c0be5f24e643fe608e8023f38fe97f88988495116d332fd60405160405180910390a45b50505050565b6118f26000801b33610e4f565b6118fb57600080fd5b611903611b3d565b565b600033905090565b6119358160016000858152602001908152602001600020600001611be590919063ffffffff16565b1561199d57611942611905565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6119c98160016000858152602001908152602001600020600001611c1590919063ffffffff16565b15611a31576119d6611905565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000809054906101000a900460ff1615611a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7b90612d4b565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ac7611905565b604051611ad49190612b44565b60405180910390a1565b6000611aed8360000183611c45565b60001c905092915050565b6000611b20836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611cb2565b905092915050565b6000611b3682600001611cd5565b9050919050565b6000809054906101000a900460ff16611b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8290612ceb565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611bce611905565b604051611bdb9190612b44565b60405180910390a1565b6000611c0d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611ce6565b905092915050565b6000611c3d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611d56565b905092915050565b600081836000018054905011611c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8790612cab565b60405180910390fd5b826000018281548110611c9f57fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000611cf28383611cb2565b611d4b578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611d50565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114611e325760006001820390506000600186600001805490500390506000866000018281548110611da157fe5b9060005260206000200154905080876000018481548110611dbe57fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480611df657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611e38565b60009150505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e7f57805160ff1916838001178555611ead565b82800160010185558215611ead579182015b82811115611eac578251825591602001919060010190611e91565b5b509050611eba9190611f7e565b5090565b604051806080016040528060008019168152602001606081526020016060815260200160006003811115611eee57fe5b81525090565b828054828255906000526020600020908101928215611f6d579160200282015b82811115611f6c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611f14565b5b509050611f7a9190611fa3565b5090565b611fa091905b80821115611f9c576000816000905550600101611f84565b5090565b90565b611fe391905b80821115611fdf57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611fa9565b5090565b90565b600081359050611ff5816130e6565b92915050565b60008135905061200a816130fd565b92915050565b60008135905061201f81613114565b92915050565b600082601f83011261203657600080fd5b813561204961204482612ebc565b612e8f565b9150808252602083016020830185838301111561206557600080fd5b612070838284613055565b50505092915050565b6000813590506120888161312b565b92915050565b60008135905061209d81613142565b92915050565b6000602082840312156120b557600080fd5b60006120c384828501611fe6565b91505092915050565b600080604083850312156120df57600080fd5b60006120ed85828601611fe6565b92505060206120fe85828601611fe6565b9150509250929050565b60008060006060848603121561211d57600080fd5b600061212b86828701611fe6565b935050602061213c86828701611ffb565b925050604061214d86828701611fe6565b9150509250925092565b600080600080600060a0868803121561216f57600080fd5b600061217d88828901611fe6565b955050602061218e88828901611ffb565b945050604061219f88828901611fe6565b93505060606121b088828901612010565b92505060806121c188828901612010565b9150509295509295909350565b6000602082840312156121e057600080fd5b60006121ee84828501611ffb565b91505092915050565b6000806040838503121561220a57600080fd5b600061221885828601611ffb565b925050602061222985828601611fe6565b9150509250929050565b6000806040838503121561224657600080fd5b600061225485828601611ffb565b925050602061226585828601612079565b9150509250929050565b60006020828403121561228157600080fd5b600061228f84828501612079565b91505092915050565b6000602082840312156122aa57600080fd5b60006122b88482850161208e565b91505092915050565b6000806000606084860312156122d657600080fd5b60006122e48682870161208e565b93505060206122f586828701611fe6565b925050604084013567ffffffffffffffff81111561231257600080fd5b61231e86828701612025565b9150509250925092565b6000806040838503121561233b57600080fd5b60006123498582860161208e565b925050602061235a85828601612079565b9150509250929050565b60008060006060848603121561237957600080fd5b60006123878682870161208e565b935050602061239886828701612079565b92505060406123a986828701611fe6565b9150509250925092565b600080600080608085870312156123c957600080fd5b60006123d78782880161208e565b94505060206123e887828801612079565b93505060406123f987828801611fe6565b925050606085013567ffffffffffffffff81111561241657600080fd5b61242287828801612025565b91505092959194509250565b60008060006060848603121561244357600080fd5b60006124518682870161208e565b935050602061246286828701612079565b925050604061247386828701611ffb565b9150509250925092565b600061248983836124a4565b60208301905092915050565b61249e8161300d565b82525050565b6124ad81612f6f565b82525050565b6124bc81612f6f565b82525050565b6124d36124ce82612f6f565b613097565b82525050565b60006124e482612ef8565b6124ee8185612f26565b93506124f983612ee8565b8060005b8381101561252a578151612511888261247d565b975061251c83612f19565b9250506001810190506124fd565b5085935050505092915050565b61254081612f81565b82525050565b61254f81612f8d565b82525050565b61255e81612f8d565b82525050565b61256d81612f97565b82525050565b600061257e82612f0e565b6125888185612f37565b9350612598818560208601613064565b6125a1816130bb565b840191505092915050565b60006125b782612f0e565b6125c18185612f48565b93506125d1818560208601613064565b80840191505092915050565b60006125e882612f03565b6125f28185612f37565b9350612602818560208601613064565b61260b816130bb565b840191505092915050565b61261f8161301f565b82525050565b61262e8161301f565b82525050565b6000612641601683612f53565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b6000612681602283612f53565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126e7602f83612f53565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b600061274d601483612f53565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b600061278d602583612f53565b91507f72656c617965722068617320616c726561647920766f746564206f6e2070726f60008301527f706f73616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127f3603083612f53565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f207265766f6b65000000000000000000000000000000006020830152604082019050919050565b6000612859601083612f53565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000612899603183612f53565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b60006128ff602f83612f53565b91507f70726f706f73616c2068617320616c7265616479206265656e2070617373656460008301527f206f72207472616e7366657272656400000000000000000000000000000000006020830152604082019050919050565b6000612965603783612f53565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b60006129cb600c83612f64565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b6000612a0b602f83612f53565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b6000608083016000830151612a7c6000860182612546565b5060208301518482036020860152612a9482826124d9565b91505060408301518482036040860152612aae82826124d9565b9150506060830151612ac36060860182612616565b508091505092915050565b612ad781612ff6565b82525050565b612ae681613000565b82525050565b6000612af882856124c2565b601482019150612b0882846125ac565b91508190509392505050565b6000612b1f826129be565b9150819050919050565b6000602082019050612b3e60008301846124b3565b92915050565b6000602082019050612b596000830184612495565b92915050565b6000602082019050612b746000830184612537565b92915050565b6000602082019050612b8f6000830184612555565b92915050565b6000604082019050612baa6000830185612555565b612bb760208301846124b3565b9392505050565b6000608082019050612bd36000830187612555565b612be060208301866124b3565b612bed6040830185612564565b612bfa6060830184612564565b95945050505050565b6000604082019050612c186000830185612555565b612c256020830184612625565b9392505050565b60006020820190508181036000830152612c4681846125dd565b905092915050565b60006020820190508181036000830152612c688184612573565b905092915050565b6000602082019050612c856000830184612625565b92915050565b60006020820190508181036000830152612ca481612634565b9050919050565b60006020820190508181036000830152612cc481612674565b9050919050565b60006020820190508181036000830152612ce4816126da565b9050919050565b60006020820190508181036000830152612d0481612740565b9050919050565b60006020820190508181036000830152612d2481612780565b9050919050565b60006020820190508181036000830152612d44816127e6565b9050919050565b60006020820190508181036000830152612d648161284c565b9050919050565b60006020820190508181036000830152612d848161288c565b9050919050565b60006020820190508181036000830152612da4816128f2565b9050919050565b60006020820190508181036000830152612dc481612958565b9050919050565b60006020820190508181036000830152612de4816129fe565b9050919050565b60006020820190508181036000830152612e058184612a64565b905092915050565b6000602082019050612e226000830184612ace565b92915050565b6000602082019050612e3d6000830184612add565b92915050565b6000608082019050612e586000830187612add565b612e656020830186612ace565b612e726040830185612495565b8181036060830152612e848184612573565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715612eb257600080fd5b8060405250919050565b600067ffffffffffffffff821115612ed357600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612f7a82612fd6565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612fd1826130d9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061301882613031565b9050919050565b600061302a82612fc3565b9050919050565b600061303c82613043565b9050919050565b600061304e82612fd6565b9050919050565b82818337600083830152505050565b60005b83811015613082578082015181840152602081019050613067565b83811115613091576000848401525b50505050565b60006130a2826130a9565b9050919050565b60006130b4826130cc565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b600481106130e357fe5b50565b6130ef81612f6f565b81146130fa57600080fd5b50565b61310681612f8d565b811461311157600080fd5b50565b61311d81612f97565b811461312857600080fd5b50565b61313481612ff6565b811461313f57600080fd5b50565b61314b81613000565b811461315657600080fd5b5056fea26469706673582212202fa9932869f66bd3c682855a970b48eca1c9eb58cc1b356bd40beb17f789922e64736f6c63430006040033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID uint8, initialRelayers []common.Address, initialRelayerThreshold *big.Int) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, chainID, initialRelayers, initialRelayerThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "DEFAULT_ADMIN_ROLE")
	return *ret0, err
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Bridge.Contract.DEFAULTADMINROLE(&_Bridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeCaller) RELAYERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "RELAYER_ROLE")
	return *ret0, err
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeSession) RELAYERROLE() ([32]byte, error) {
	return _Bridge.Contract.RELAYERROLE(&_Bridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_Bridge *BridgeCallerSession) RELAYERROLE() ([32]byte, error) {
	return _Bridge.Contract.RELAYERROLE(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_chainID")
	return *ret0, err
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_Bridge *BridgeCallerSession) ChainID() (uint8, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint256)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 uint8) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositCounts", arg0)
	return *ret0, err
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint256)
func (_Bridge *BridgeSession) DepositCounts(arg0 uint8) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0x4b0b919d.
//
// Solidity: function _depositCounts(uint8 ) view returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 uint8) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositProposals is a free data retrieval call binding the contract method 0x7820b222.
//
// Solidity: function _depositProposals(uint8 , uint256 ) view returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCaller) DepositProposals(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	ret := new(struct {
		DataHash [32]byte
		Status   uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_depositProposals", arg0, arg1)
	return *ret, err
}

// DepositProposals is a free data retrieval call binding the contract method 0x7820b222.
//
// Solidity: function _depositProposals(uint8 , uint256 ) view returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeSession) DepositProposals(arg0 uint8, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositProposals is a free data retrieval call binding the contract method 0x7820b222.
//
// Solidity: function _depositProposals(uint8 , uint256 ) view returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCallerSession) DepositProposals(arg0 uint8, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0xce3d5784.
//
// Solidity: function _depositRecords(uint8 , uint256 ) view returns(bytes)
func (_Bridge *BridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositRecords", arg0, arg1)
	return *ret0, err
}

// DepositRecords is a free data retrieval call binding the contract method 0xce3d5784.
//
// Solidity: function _depositRecords(uint8 , uint256 ) view returns(bytes)
func (_Bridge *BridgeSession) DepositRecords(arg0 uint8, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0xce3d5784.
//
// Solidity: function _depositRecords(uint8 , uint256 ) view returns(bytes)
func (_Bridge *BridgeCallerSession) DepositRecords(arg0 uint8, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x8ba3706a.
//
// Solidity: function _hasVotedOnDepositProposal(uint8 , uint256 , address ) view returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnDepositProposal(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_hasVotedOnDepositProposal", arg0, arg1, arg2)
	return *ret0, err
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x8ba3706a.
//
// Solidity: function _hasVotedOnDepositProposal(uint8 , uint256 , address ) view returns(bool)
func (_Bridge *BridgeSession) HasVotedOnDepositProposal(arg0 uint8, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x8ba3706a.
//
// Solidity: function _hasVotedOnDepositProposal(uint8 , uint256 , address ) view returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnDepositProposal(arg0 uint8, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerThreshold")
	return *ret0, err
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() view returns(uint256)
func (_Bridge *BridgeCaller) TotalDepositProposals(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_totalDepositProposals")
	return *ret0, err
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() view returns(uint256)
func (_Bridge *BridgeSession) TotalDepositProposals() (*big.Int, error) {
	return _Bridge.Contract.TotalDepositProposals(&_Bridge.CallOpts)
}

// TotalDepositProposals is a free data retrieval call binding the contract method 0x06899ca4.
//
// Solidity: function _totalDepositProposals() view returns(uint256)
func (_Bridge *BridgeCallerSession) TotalDepositProposals() (*big.Int, error) {
	return _Bridge.Contract.TotalDepositProposals(&_Bridge.CallOpts)
}

// TotalRelayers is a free data retrieval call binding the contract method 0x802aabe8.
//
// Solidity: function _totalRelayers() view returns(uint256)
func (_Bridge *BridgeCaller) TotalRelayers(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_totalRelayers")
	return *ret0, err
}

// TotalRelayers is a free data retrieval call binding the contract method 0x802aabe8.
//
// Solidity: function _totalRelayers() view returns(uint256)
func (_Bridge *BridgeSession) TotalRelayers() (*big.Int, error) {
	return _Bridge.Contract.TotalRelayers(&_Bridge.CallOpts)
}

// TotalRelayers is a free data retrieval call binding the contract method 0x802aabe8.
//
// Solidity: function _totalRelayers() view returns(uint256)
func (_Bridge *BridgeCallerSession) TotalRelayers() (*big.Int, error) {
	return _Bridge.Contract.TotalRelayers(&_Bridge.CallOpts)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xaca18b26.
//
// Solidity: function getDepositProposal(uint8 destinationChainID, uint256 depositNonce) view returns(BridgeDepositProposal)
func (_Bridge *BridgeCaller) GetDepositProposal(opts *bind.CallOpts, destinationChainID uint8, depositNonce *big.Int) (BridgeDepositProposal, error) {
	var (
		ret0 = new(BridgeDepositProposal)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getDepositProposal", destinationChainID, depositNonce)
	return *ret0, err
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xaca18b26.
//
// Solidity: function getDepositProposal(uint8 destinationChainID, uint256 depositNonce) view returns(BridgeDepositProposal)
func (_Bridge *BridgeSession) GetDepositProposal(destinationChainID uint8, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xaca18b26.
//
// Solidity: function getDepositProposal(uint8 destinationChainID, uint256 depositNonce) view returns(BridgeDepositProposal)
func (_Bridge *BridgeCallerSession) GetDepositProposal(destinationChainID uint8, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getRoleAdmin", role)
	return *ret0, err
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetRoleAdmin(&_Bridge.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getRoleMember", role, index)
	return *ret0, err
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Bridge *BridgeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Bridge.Contract.GetRoleMember(&_Bridge.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getRoleMemberCount", role)
	return *ret0, err
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Bridge *BridgeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Bridge.Contract.GetRoleMemberCount(&_Bridge.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "hasRole", role, account)
	return *ret0, err
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Bridge *BridgeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Bridge.Contract.HasRole(&_Bridge.CallOpts, role, account)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeCaller) IsRelayer(opts *bind.CallOpts, relayer common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "isRelayer", relayer)
	return *ret0, err
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeSession) IsRelayer(relayer common.Address) (bool, error) {
	return _Bridge.Contract.IsRelayer(&_Bridge.CallOpts, relayer)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_Bridge *BridgeCallerSession) IsRelayer(relayer common.Address) (bool, error) {
	return _Bridge.Contract.IsRelayer(&_Bridge.CallOpts, relayer)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Bridge *BridgeCallerSession) Paused() (bool, error) {
	return _Bridge.Contract.Paused(&_Bridge.CallOpts)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactor) AdminAddRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminAddRelayer", relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminAddRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminAddRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeTransactor) AdminChangeRelayerThreshold(opts *bind.TransactOpts, newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminChangeRelayerThreshold", newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeRelayerThreshold(&_Bridge.TransactOpts, newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_Bridge *BridgeTransactorSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.AdminChangeRelayerThreshold(&_Bridge.TransactOpts, newThreshold)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminPauseTransfers(&_Bridge.TransactOpts)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactor) AdminRemoveRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminRemoveRelayer", relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRemoveRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminRemoveRelayer(&_Bridge.TransactOpts, relayerAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetBurnable", handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x8c0c2631.
//
// Solidity: function adminSetBurnable(address handlerAddress, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetBurnable(handlerAddress common.Address, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetBurnable(&_Bridge.TransactOpts, handlerAddress, tokenAddress)
}

// AdminSetResourceIDAndContractAddress is a paid mutator transaction binding the contract method 0xb419ee06.
//
// Solidity: function adminSetResourceIDAndContractAddress(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactor) AdminSetResourceIDAndContractAddress(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResourceIDAndContractAddress", handlerAddress, resourceID, tokenAddress)
}

// AdminSetResourceIDAndContractAddress is a paid mutator transaction binding the contract method 0xb419ee06.
//
// Solidity: function adminSetResourceIDAndContractAddress(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeSession) AdminSetResourceIDAndContractAddress(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResourceIDAndContractAddress(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResourceIDAndContractAddress is a paid mutator transaction binding the contract method 0xb419ee06.
//
// Solidity: function adminSetResourceIDAndContractAddress(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResourceIDAndContractAddress(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResourceIDAndContractAddress(&_Bridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResourceIdInGenericHandler is a paid mutator transaction binding the contract method 0x59f4206a.
//
// Solidity: function adminSetResourceIdInGenericHandler(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeTransactor) AdminSetResourceIdInGenericHandler(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminSetResourceIdInGenericHandler", handlerAddress, resourceID, contractAddress, depositFunctionSig, executeFunctionSig)
}

// AdminSetResourceIdInGenericHandler is a paid mutator transaction binding the contract method 0x59f4206a.
//
// Solidity: function adminSetResourceIdInGenericHandler(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeSession) AdminSetResourceIdInGenericHandler(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResourceIdInGenericHandler(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, depositFunctionSig, executeFunctionSig)
}

// AdminSetResourceIdInGenericHandler is a paid mutator transaction binding the contract method 0x59f4206a.
//
// Solidity: function adminSetResourceIdInGenericHandler(address handlerAddress, bytes32 resourceID, address contractAddress, bytes4 depositFunctionSig, bytes4 executeFunctionSig) returns()
func (_Bridge *BridgeTransactorSession) AdminSetResourceIdInGenericHandler(handlerAddress common.Address, resourceID [32]byte, contractAddress common.Address, depositFunctionSig [4]byte, executeFunctionSig [4]byte) (*types.Transaction, error) {
	return _Bridge.Contract.AdminSetResourceIdInGenericHandler(&_Bridge.TransactOpts, handlerAddress, resourceID, contractAddress, depositFunctionSig, executeFunctionSig)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_Bridge *BridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _Bridge.Contract.AdminUnpauseTransfers(&_Bridge.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0x3e87ba3c.
//
// Solidity: function deposit(uint8 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationChainID uint8, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x3e87ba3c.
//
// Solidity: function deposit(uint8 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) Deposit(destinationChainID uint8, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0x3e87ba3c.
//
// Solidity: function deposit(uint8 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationChainID uint8, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x478fa240.
//
// Solidity: function executeDepositProposal(uint8 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteDepositProposal(opts *bind.TransactOpts, originChainID uint8, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeDepositProposal", originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x478fa240.
//
// Solidity: function executeDepositProposal(uint8 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) ExecuteDepositProposal(originChainID uint8, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x478fa240.
//
// Solidity: function executeDepositProposal(uint8 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteDepositProposal(originChainID uint8, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.GrantRole(&_Bridge.TransactOpts, role, account)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_Bridge *BridgeTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceAdmin(&_Bridge.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RenounceRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Bridge *BridgeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RevokeRole(&_Bridge.TransactOpts, role, account)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xff6ae003.
//
// Solidity: function voteDepositProposal(uint8 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactor) VoteDepositProposal(opts *bind.TransactOpts, originChainID uint8, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteDepositProposal", originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xff6ae003.
//
// Solidity: function voteDepositProposal(uint8 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeSession) VoteDepositProposal(originChainID uint8, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xff6ae003.
//
// Solidity: function voteDepositProposal(uint8 originChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactorSession) VoteDepositProposal(originChainID uint8, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, dataHash)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	DestinationChainID        uint8
	OriginChainHandlerAddress common.Address
	DepositNonce              *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, destinationChainID []uint8, originChainHandlerAddress []common.Address, depositNonce []*big.Int) (*BridgeDepositIterator, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", destinationChainIDRule, originChainHandlerAddressRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, destinationChainID []uint8, originChainHandlerAddress []common.Address, depositNonce []*big.Int) (event.Subscription, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", destinationChainIDRule, originChainHandlerAddressRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Bridge contract.
type BridgePausedIterator struct {
	Event *BridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgePaused represents a Paused event raised by the Bridge contract.
type BridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*BridgePausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &BridgePausedIterator{contract: _Bridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *BridgePaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgePaused)
				if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Bridge *BridgeFilterer) ParsePaused(log types.Log) (*BridgePaused, error) {
	event := new(BridgePaused)
	if err := _Bridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeProposalCreatedIterator is returned from FilterProposalCreated and is used to iterate over the raw logs and unpacked data for ProposalCreated events raised by the Bridge contract.
type BridgeProposalCreatedIterator struct {
	Event *BridgeProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalCreated represents a ProposalCreated event raised by the Bridge contract.
type BridgeProposalCreated struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	DataHash           [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterProposalCreated is a free log retrieval operation binding the contract event 0x194898110d0d38ea3cd7aa3fa939f87bb9bbad8427482df365d5ecc36b743805.
//
// Solidity: event ProposalCreated(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterProposalCreated(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeProposalCreatedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalCreatedIterator{contract: _Bridge.contract, event: "ProposalCreated", logs: logs, sub: sub}, nil
}

// WatchProposalCreated is a free log subscription operation binding the contract event 0x194898110d0d38ea3cd7aa3fa939f87bb9bbad8427482df365d5ecc36b743805.
//
// Solidity: event ProposalCreated(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeProposalCreated, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalCreated is a log parse operation binding the contract event 0x194898110d0d38ea3cd7aa3fa939f87bb9bbad8427482df365d5ecc36b743805.
//
// Solidity: event ProposalCreated(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseProposalCreated(log types.Log) (*BridgeProposalCreated, error) {
	event := new(BridgeProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "ProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeProposalExecutedIterator is returned from FilterProposalExecuted and is used to iterate over the raw logs and unpacked data for ProposalExecuted events raised by the Bridge contract.
type BridgeProposalExecutedIterator struct {
	Event *BridgeProposalExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalExecuted represents a ProposalExecuted event raised by the Bridge contract.
type BridgeProposalExecuted struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterProposalExecuted is a free log retrieval operation binding the contract event 0xa5c8f3b7dbf19ce2d73c2641a6b4a360c9011cd3ae7f6d12e0454fe81570dc30.
//
// Solidity: event ProposalExecuted(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterProposalExecuted(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeProposalExecutedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalExecutedIterator{contract: _Bridge.contract, event: "ProposalExecuted", logs: logs, sub: sub}, nil
}

// WatchProposalExecuted is a free log subscription operation binding the contract event 0xa5c8f3b7dbf19ce2d73c2641a6b4a360c9011cd3ae7f6d12e0454fe81570dc30.
//
// Solidity: event ProposalExecuted(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchProposalExecuted(opts *bind.WatchOpts, sink chan<- *BridgeProposalExecuted, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalExecuted)
				if err := _Bridge.contract.UnpackLog(event, "ProposalExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalExecuted is a log parse operation binding the contract event 0xa5c8f3b7dbf19ce2d73c2641a6b4a360c9011cd3ae7f6d12e0454fe81570dc30.
//
// Solidity: event ProposalExecuted(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseProposalExecuted(log types.Log) (*BridgeProposalExecuted, error) {
	event := new(BridgeProposalExecuted)
	if err := _Bridge.contract.UnpackLog(event, "ProposalExecuted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeProposalFinalizedIterator is returned from FilterProposalFinalized and is used to iterate over the raw logs and unpacked data for ProposalFinalized events raised by the Bridge contract.
type BridgeProposalFinalizedIterator struct {
	Event *BridgeProposalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalFinalized represents a ProposalFinalized event raised by the Bridge contract.
type BridgeProposalFinalized struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterProposalFinalized is a free log retrieval operation binding the contract event 0x0da2fadf3d07092b7c0be5f24e643fe608e8023f38fe97f88988495116d332fd.
//
// Solidity: event ProposalFinalized(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterProposalFinalized(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeProposalFinalizedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalFinalizedIterator{contract: _Bridge.contract, event: "ProposalFinalized", logs: logs, sub: sub}, nil
}

// WatchProposalFinalized is a free log subscription operation binding the contract event 0x0da2fadf3d07092b7c0be5f24e643fe608e8023f38fe97f88988495116d332fd.
//
// Solidity: event ProposalFinalized(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchProposalFinalized(opts *bind.WatchOpts, sink chan<- *BridgeProposalFinalized, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalFinalized)
				if err := _Bridge.contract.UnpackLog(event, "ProposalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalFinalized is a log parse operation binding the contract event 0x0da2fadf3d07092b7c0be5f24e643fe608e8023f38fe97f88988495116d332fd.
//
// Solidity: event ProposalFinalized(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseProposalFinalized(log types.Log) (*BridgeProposalFinalized, error) {
	event := new(BridgeProposalFinalized)
	if err := _Bridge.contract.UnpackLog(event, "ProposalFinalized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeProposalVoteIterator is returned from FilterProposalVote and is used to iterate over the raw logs and unpacked data for ProposalVote events raised by the Bridge contract.
type BridgeProposalVoteIterator struct {
	Event *BridgeProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeProposalVote represents a ProposalVote event raised by the Bridge contract.
type BridgeProposalVote struct {
	OriginChainID      uint8
	DestinationChainID uint8
	DepositNonce       *big.Int
	Status             uint8
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterProposalVote is a free log retrieval operation binding the contract event 0xc954da58dd7f8bea0c2f55f3f557dc861271ad571074e3b417749eff0af46aab.
//
// Solidity: event ProposalVote(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) FilterProposalVote(opts *bind.FilterOpts, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (*BridgeProposalVoteIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeProposalVoteIterator{contract: _Bridge.contract, event: "ProposalVote", logs: logs, sub: sub}, nil
}

// WatchProposalVote is a free log subscription operation binding the contract event 0xc954da58dd7f8bea0c2f55f3f557dc861271ad571074e3b417749eff0af46aab.
//
// Solidity: event ProposalVote(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) WatchProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeProposalVote, originChainID []uint8, destinationChainID []uint8, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalVote is a log parse operation binding the contract event 0xc954da58dd7f8bea0c2f55f3f557dc861271ad571074e3b417749eff0af46aab.
//
// Solidity: event ProposalVote(uint8 indexed originChainID, uint8 indexed destinationChainID, uint256 indexed depositNonce, uint8 status)
func (_Bridge *BridgeFilterer) ParseProposalVote(log types.Log) (*BridgeProposalVote, error) {
	event := new(BridgeProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerAddedIterator is returned from FilterRelayerAdded and is used to iterate over the raw logs and unpacked data for RelayerAdded events raised by the Bridge contract.
type BridgeRelayerAddedIterator struct {
	Event *BridgeRelayerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerAdded represents a RelayerAdded event raised by the Bridge contract.
type BridgeRelayerAdded struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerAdded is a free log retrieval operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) FilterRelayerAdded(opts *bind.FilterOpts, relayer []common.Address) (*BridgeRelayerAddedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerAddedIterator{contract: _Bridge.contract, event: "RelayerAdded", logs: logs, sub: sub}, nil
}

// WatchRelayerAdded is a free log subscription operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) WatchRelayerAdded(opts *bind.WatchOpts, sink chan<- *BridgeRelayerAdded, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerAdded)
				if err := _Bridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerAdded is a log parse operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_Bridge *BridgeFilterer) ParseRelayerAdded(log types.Log) (*BridgeRelayerAdded, error) {
	event := new(BridgeRelayerAdded)
	if err := _Bridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerRemovedIterator is returned from FilterRelayerRemoved and is used to iterate over the raw logs and unpacked data for RelayerRemoved events raised by the Bridge contract.
type BridgeRelayerRemovedIterator struct {
	Event *BridgeRelayerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerRemoved represents a RelayerRemoved event raised by the Bridge contract.
type BridgeRelayerRemoved struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerRemoved is a free log retrieval operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) FilterRelayerRemoved(opts *bind.FilterOpts, relayer []common.Address) (*BridgeRelayerRemovedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerRemovedIterator{contract: _Bridge.contract, event: "RelayerRemoved", logs: logs, sub: sub}, nil
}

// WatchRelayerRemoved is a free log subscription operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) WatchRelayerRemoved(opts *bind.WatchOpts, sink chan<- *BridgeRelayerRemoved, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerRemoved)
				if err := _Bridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerRemoved is a log parse operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_Bridge *BridgeFilterer) ParseRelayerRemoved(log types.Log) (*BridgeRelayerRemoved, error) {
	event := new(BridgeRelayerRemoved)
	if err := _Bridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Bridge contract.
type BridgeRoleGrantedIterator struct {
	Event *BridgeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleGranted represents a RoleGranted event raised by the Bridge contract.
type BridgeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleGrantedIterator{contract: _Bridge.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleGranted)
				if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleGranted(log types.Log) (*BridgeRoleGranted, error) {
	event := new(BridgeRoleGranted)
	if err := _Bridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Bridge contract.
type BridgeRoleRevokedIterator struct {
	Event *BridgeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRoleRevoked represents a RoleRevoked event raised by the Bridge contract.
type BridgeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRoleRevokedIterator{contract: _Bridge.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRoleRevoked)
				if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Bridge *BridgeFilterer) ParseRoleRevoked(log types.Log) (*BridgeRoleRevoked, error) {
	event := new(BridgeRoleRevoked)
	if err := _Bridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Bridge contract.
type BridgeUnpausedIterator struct {
	Event *BridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeUnpaused represents a Unpaused event raised by the Bridge contract.
type BridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*BridgeUnpausedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &BridgeUnpausedIterator{contract: _Bridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *BridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeUnpaused)
				if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Bridge *BridgeFilterer) ParseUnpaused(log types.Log) (*BridgeUnpaused, error) {
	event := new(BridgeUnpaused)
	if err := _Bridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

var RuntimeBytecode = "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80638c0c26311161010f578063beab7131116100a2578063d547741f11610071578063d547741f146105c8578063d7a9cd79146105e4578063ff6ae00314610602578063ffaac0eb1461061e576101f0565b8063beab71311461052e578063ca15c8731461054c578063cdb0f73a1461057c578063ce3d578414610598576101f0565b80639d82dd63116100de5780639d82dd63146104a8578063a217fddf146104c4578063aca18b26146104e2578063b419ee0614610512576101f0565b80638c0c26311461040e5780639010d07c1461042a57806391d148541461045a578063926d7d7f1461048a576101f0565b8063541d5548116101875780637820b222116101565780637820b22214610385578063802aabe8146103b657806380ae1c28146103d45780638ba3706a146103de576101f0565b8063541d5548146102ff57806359f4206a1461032f5780635c975abb1461034b5780635e1fab0f14610369576101f0565b80633e87ba3c116101c35780633e87ba3c1461027b578063478fa240146102975780634b0b919d146102b35780634e056005146102e3576101f0565b806306899ca4146101f5578063248a9ca3146102135780632f2ff15d1461024357806336568abe1461025f575b600080fd5b6101fd610628565b60405161020a9190612e0d565b60405180910390f35b61022d600480360381019061022891906121ce565b61062e565b60405161023a9190612b7a565b60405180910390f35b61025d600480360381019061025891906121f7565b61064e565b005b610279600480360381019061027491906121f7565b6106c2565b005b610295600480360381019061029091906122c1565b610745565b005b6102b160048036038101906102ac91906123b3565b6108c2565b005b6102cd60048036038101906102c89190612298565b610b8a565b6040516102da9190612e0d565b60405180910390f35b6102fd60048036038101906102f8919061226f565b610ba2565b005b610319600480360381019061031491906120a3565b610bef565b6040516103269190612b5f565b60405180910390f35b61034960048036038101906103449190612157565b610c15565b005b610353610ca9565b6040516103609190612b5f565b60405180910390f35b610383600480360381019061037e91906120a3565b610cbf565b005b61039f600480360381019061039a9190612328565b610cf2565b6040516103ad929190612c03565b60405180910390f35b6103be610d30565b6040516103cb9190612e0d565b60405180910390f35b6103dc610d36565b005b6103f860048036038101906103f39190612364565b610d56565b6040516104059190612b5f565b60405180910390f35b610428600480360381019061042391906120cc565b610d92565b005b610444600480360381019061043f9190612233565b610e1d565b6040516104519190612b29565b60405180910390f35b610474600480360381019061046f91906121f7565b610e4f565b6040516104819190612b5f565b60405180910390f35b610492610e81565b60405161049f9190612b7a565b60405180910390f35b6104c260048036038101906104bd91906120a3565b610e98565b005b6104cc610f24565b6040516104d99190612b7a565b60405180910390f35b6104fc60048036038101906104f79190612328565b610f2b565b6040516105099190612deb565b60405180910390f35b61052c60048036038101906105279190612108565b6110c3565b005b610536611151565b6040516105439190612e28565b60405180910390f35b610566600480360381019061056191906121ce565b611164565b6040516105739190612e0d565b60405180910390f35b610596600480360381019061059191906120a3565b61118b565b005b6105b260048036038101906105ad9190612328565b611216565b6040516105bf9190612c2c565b60405180910390f35b6105e260048036038101906105dd91906121f7565b6112d3565b005b6105ec611347565b6040516105f99190612e0d565b60405180910390f35b61061c6004803603810190610617919061242e565b61134d565b005b6106266118e5565b005b60055481565b600060016000838152602001908152602001600020600201549050919050565b6106756001600084815260200190815260200160002060020154610670611905565b610e4f565b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90612ccb565b60405180910390fd5b6106be828261190d565b5050565b6106ca611905565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e90612dcb565b60405180910390fd5b61074182826119a1565b5050565b6000809054906101000a900460ff1615610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078b90612d4b565b60405180910390fd5b6000600660008560ff1660ff16815260200190815260200160002060008154600101919050819055905081600760008660ff1660ff168152602001908152602001600020600083815260200190815260200160002090805190602001906107fc929190611e3e565b5060008390508073ffffffffffffffffffffffffffffffffffffffff166345a104db868433876040518563ffffffff1660e01b81526004016108419493929190612e43565b600060405180830381600087803b15801561085b57600080fd5b505af115801561086f573d6000803e3d6000fd5b50505050818473ffffffffffffffffffffffffffffffffffffffff168660ff167f47903cb3f3dd35755d4df452f71612f60bd0bfc2f66f52901e099f3ac2f319fe60405160405180910390a45050505050565b6108df6040516108d190612b14565b604051809103902033610e4f565b6108e857600080fd5b6000809054906101000a900460ff1615610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e90612d4b565b60405180910390fd5b6000600860008660ff1660ff168152602001908152602001600020600085815260200190815260200160002090506000600381111561097257fe5b8160030160009054906101000a900460ff16600381111561098f57fe5b14156109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c790612c8b565b60405180910390fd5b600260038111156109dd57fe5b8160030160009054906101000a900460ff1660038111156109fa57fe5b14610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190612dab565b60405180910390fd5b80600001548383604051602001610a52929190612aec565b6040516020818303038152906040528051906020012014610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90612d6b565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b8152600401610ae69190612c4e565b600060405180830381600087803b158015610b0057600080fd5b505af1158015610b14573d6000803e3d6000fd5b5050505060038260030160006101000a81548160ff02191690836003811115610b3957fe5b021790555084600260009054906101000a900460ff1660ff168760ff167fa5c8f3b7dbf19ce2d73c2641a6b4a360c9011cd3ae7f6d12e0454fe81570dc3060405160405180910390a4505050505050565b60066020528060005260406000206000915090505481565b610baf6000801b33610e4f565b610bb857600080fd5b80600381905550807fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a250565b6000610c0e604051610c0090612b14565b604051809103902083610e4f565b9050919050565b610c226000801b33610e4f565b610c2b57600080fd5b60008590508073ffffffffffffffffffffffffffffffffffffffff1663bba8185a868686866040518563ffffffff1660e01b8152600401610c6f9493929190612bbe565b600060405180830381600087803b158015610c8957600080fd5b505af1158015610c9d573d6000803e3d6000fd5b50505050505050505050565b60008060009054906101000a900460ff16905090565b610ccc6000801b33610e4f565b610cd557600080fd5b610ce26000801b8261064e565b610cef6000801b336106c2565b50565b6008602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60045481565b610d436000801b33610e4f565b610d4c57600080fd5b610d54611a35565b565b6009602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b610d9f6000801b33610e4f565b610da857600080fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b8152600401610de69190612b29565b600060405180830381600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b50505050505050565b6000610e478260016000868152602001908152602001600020600001611ade90919063ffffffff16565b905092915050565b6000610e798260016000868152602001908152602001600020600001611af890919063ffffffff16565b905092915050565b604051610e8d90612b14565b604051809103902081565b610ea56000801b33610e4f565b610eae57600080fd5b610ecb604051610ebd90612b14565b6040518091039020826112d3565b8073ffffffffffffffffffffffffffffffffffffffff167f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b60405160405180910390a26004600081548092919060019003919050555050565b6000801b81565b610f33611ebe565b600860008460ff1660ff16815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ff757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fad575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561108557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161103b575b505050505081526020016003820160009054906101000a900460ff1660038111156110ac57fe5b60038111156110b757fe5b81525050905092915050565b6110d06000801b33610e4f565b6110d957600080fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff16638a025ce884846040518363ffffffff1660e01b8152600401611119929190612b95565b600060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b5050505050505050565b600260009054906101000a900460ff1681565b600061118460016000848152602001908152602001600020600001611b28565b9050919050565b6111986000801b33610e4f565b6111a157600080fd5b6111be6040516111b090612b14565b60405180910390208261064e565b8073ffffffffffffffffffffffffffffffffffffffff167f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c560405160405180910390a260046000815480929190600101919050555050565b6007602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112cb5780601f106112a0576101008083540402835291602001916112cb565b820191906000526020600020905b8154815290600101906020018083116112ae57829003601f168201915b505050505081565b6112fa60016000848152602001908152602001600020600201546112f5611905565b610e4f565b611339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133090612d2b565b60405180910390fd5b61134382826119a1565b5050565b60035481565b61136a60405161135c90612b14565b604051809103902033610e4f565b61137357600080fd5b6000809054906101000a900460ff16156113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b990612d4b565b60405180910390fd5b6000600860008560ff1660ff1681526020019081526020016000206000848152602001908152602001600020905060018160030160009054906101000a900460ff16600381111561140f57fe5b1115611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612d8b565b60405180910390fd5b600960008560ff1660ff168152602001908152602001600020600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114fc90612d0b565b60405180910390fd5b60008160030160009054906101000a900460ff16600381111561152457fe5b141561170e57600560008154600101919050819055506040518060800160405280838152602001600160405190808252806020026020018201604052801561157b5781602001602082028036833780820191505090505b50815260200160006040519080825280602002602001820160405280156115b15781602001602082028036833780820191505090505b508152602001600160038111156115c457fe5b815250600860008660ff1660ff1681526020019081526020016000206000858152602001908152602001600020600082015181600001556020820151816001019080519060200190611617929190611ef4565b506040820151816002019080519060200190611634929190611ef4565b5060608201518160030160006101000a81548160ff0219169083600381111561165957fe5b0217905550905050338160010160008154811061167257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260009054906101000a900460ff1660ff168560ff167f194898110d0d38ea3cd7aa3fa939f87bb9bbad8427482df365d5ecc36b743805856040516117019190612b7a565b60405180910390a4611774565b80600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600960008660ff1660ff168152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082600260009054906101000a900460ff1660ff168560ff167fc954da58dd7f8bea0c2f55f3f557dc861271ad571074e3b417749eff0af46aab8460030160009054906101000a900460ff1660405161184c9190612c70565b60405180910390a4600160035411158061186f5750600354816001018054905010155b156118df5760028160030160006101000a81548160ff0219169083600381111561189557fe5b021790555082600260009054906101000a900460ff1660ff168560ff167f0da2fadf3d07092b7c0be5f24e643fe608e8023f38fe97f88988495116d332fd60405160405180910390a45b50505050565b6118f26000801b33610e4f565b6118fb57600080fd5b611903611b3d565b565b600033905090565b6119358160016000858152602001908152602001600020600001611be590919063ffffffff16565b1561199d57611942611905565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6119c98160016000858152602001908152602001600020600001611c1590919063ffffffff16565b15611a31576119d6611905565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000809054906101000a900460ff1615611a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7b90612d4b565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ac7611905565b604051611ad49190612b44565b60405180910390a1565b6000611aed8360000183611c45565b60001c905092915050565b6000611b20836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611cb2565b905092915050565b6000611b3682600001611cd5565b9050919050565b6000809054906101000a900460ff16611b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8290612ceb565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611bce611905565b604051611bdb9190612b44565b60405180910390a1565b6000611c0d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611ce6565b905092915050565b6000611c3d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b611d56565b905092915050565b600081836000018054905011611c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8790612cab565b60405180910390fd5b826000018281548110611c9f57fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000611cf28383611cb2565b611d4b578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611d50565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114611e325760006001820390506000600186600001805490500390506000866000018281548110611da157fe5b9060005260206000200154905080876000018481548110611dbe57fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480611df657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611e38565b60009150505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e7f57805160ff1916838001178555611ead565b82800160010185558215611ead579182015b82811115611eac578251825591602001919060010190611e91565b5b509050611eba9190611f7e565b5090565b604051806080016040528060008019168152602001606081526020016060815260200160006003811115611eee57fe5b81525090565b828054828255906000526020600020908101928215611f6d579160200282015b82811115611f6c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611f14565b5b509050611f7a9190611fa3565b5090565b611fa091905b80821115611f9c576000816000905550600101611f84565b5090565b90565b611fe391905b80821115611fdf57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611fa9565b5090565b90565b600081359050611ff5816130e6565b92915050565b60008135905061200a816130fd565b92915050565b60008135905061201f81613114565b92915050565b600082601f83011261203657600080fd5b813561204961204482612ebc565b612e8f565b9150808252602083016020830185838301111561206557600080fd5b612070838284613055565b50505092915050565b6000813590506120888161312b565b92915050565b60008135905061209d81613142565b92915050565b6000602082840312156120b557600080fd5b60006120c384828501611fe6565b91505092915050565b600080604083850312156120df57600080fd5b60006120ed85828601611fe6565b92505060206120fe85828601611fe6565b9150509250929050565b60008060006060848603121561211d57600080fd5b600061212b86828701611fe6565b935050602061213c86828701611ffb565b925050604061214d86828701611fe6565b9150509250925092565b600080600080600060a0868803121561216f57600080fd5b600061217d88828901611fe6565b955050602061218e88828901611ffb565b945050604061219f88828901611fe6565b93505060606121b088828901612010565b92505060806121c188828901612010565b9150509295509295909350565b6000602082840312156121e057600080fd5b60006121ee84828501611ffb565b91505092915050565b6000806040838503121561220a57600080fd5b600061221885828601611ffb565b925050602061222985828601611fe6565b9150509250929050565b6000806040838503121561224657600080fd5b600061225485828601611ffb565b925050602061226585828601612079565b9150509250929050565b60006020828403121561228157600080fd5b600061228f84828501612079565b91505092915050565b6000602082840312156122aa57600080fd5b60006122b88482850161208e565b91505092915050565b6000806000606084860312156122d657600080fd5b60006122e48682870161208e565b93505060206122f586828701611fe6565b925050604084013567ffffffffffffffff81111561231257600080fd5b61231e86828701612025565b9150509250925092565b6000806040838503121561233b57600080fd5b60006123498582860161208e565b925050602061235a85828601612079565b9150509250929050565b60008060006060848603121561237957600080fd5b60006123878682870161208e565b935050602061239886828701612079565b92505060406123a986828701611fe6565b9150509250925092565b600080600080608085870312156123c957600080fd5b60006123d78782880161208e565b94505060206123e887828801612079565b93505060406123f987828801611fe6565b925050606085013567ffffffffffffffff81111561241657600080fd5b61242287828801612025565b91505092959194509250565b60008060006060848603121561244357600080fd5b60006124518682870161208e565b935050602061246286828701612079565b925050604061247386828701611ffb565b9150509250925092565b600061248983836124a4565b60208301905092915050565b61249e8161300d565b82525050565b6124ad81612f6f565b82525050565b6124bc81612f6f565b82525050565b6124d36124ce82612f6f565b613097565b82525050565b60006124e482612ef8565b6124ee8185612f26565b93506124f983612ee8565b8060005b8381101561252a578151612511888261247d565b975061251c83612f19565b9250506001810190506124fd565b5085935050505092915050565b61254081612f81565b82525050565b61254f81612f8d565b82525050565b61255e81612f8d565b82525050565b61256d81612f97565b82525050565b600061257e82612f0e565b6125888185612f37565b9350612598818560208601613064565b6125a1816130bb565b840191505092915050565b60006125b782612f0e565b6125c18185612f48565b93506125d1818560208601613064565b80840191505092915050565b60006125e882612f03565b6125f28185612f37565b9350612602818560208601613064565b61260b816130bb565b840191505092915050565b61261f8161301f565b82525050565b61262e8161301f565b82525050565b6000612641601683612f53565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b6000612681602283612f53565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126e7602f83612f53565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b600061274d601483612f53565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b600061278d602583612f53565b91507f72656c617965722068617320616c726561647920766f746564206f6e2070726f60008301527f706f73616c0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006127f3603083612f53565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f207265766f6b65000000000000000000000000000000006020830152604082019050919050565b6000612859601083612f53565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000612899603183612f53565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b60006128ff602f83612f53565b91507f70726f706f73616c2068617320616c7265616479206265656e2070617373656460008301527f206f72207472616e7366657272656400000000000000000000000000000000006020830152604082019050919050565b6000612965603783612f53565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b60006129cb600c83612f64565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b6000612a0b602f83612f53565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b6000608083016000830151612a7c6000860182612546565b5060208301518482036020860152612a9482826124d9565b91505060408301518482036040860152612aae82826124d9565b9150506060830151612ac36060860182612616565b508091505092915050565b612ad781612ff6565b82525050565b612ae681613000565b82525050565b6000612af882856124c2565b601482019150612b0882846125ac565b91508190509392505050565b6000612b1f826129be565b9150819050919050565b6000602082019050612b3e60008301846124b3565b92915050565b6000602082019050612b596000830184612495565b92915050565b6000602082019050612b746000830184612537565b92915050565b6000602082019050612b8f6000830184612555565b92915050565b6000604082019050612baa6000830185612555565b612bb760208301846124b3565b9392505050565b6000608082019050612bd36000830187612555565b612be060208301866124b3565b612bed6040830185612564565b612bfa6060830184612564565b95945050505050565b6000604082019050612c186000830185612555565b612c256020830184612625565b9392505050565b60006020820190508181036000830152612c4681846125dd565b905092915050565b60006020820190508181036000830152612c688184612573565b905092915050565b6000602082019050612c856000830184612625565b92915050565b60006020820190508181036000830152612ca481612634565b9050919050565b60006020820190508181036000830152612cc481612674565b9050919050565b60006020820190508181036000830152612ce4816126da565b9050919050565b60006020820190508181036000830152612d0481612740565b9050919050565b60006020820190508181036000830152612d2481612780565b9050919050565b60006020820190508181036000830152612d44816127e6565b9050919050565b60006020820190508181036000830152612d648161284c565b9050919050565b60006020820190508181036000830152612d848161288c565b9050919050565b60006020820190508181036000830152612da4816128f2565b9050919050565b60006020820190508181036000830152612dc481612958565b9050919050565b60006020820190508181036000830152612de4816129fe565b9050919050565b60006020820190508181036000830152612e058184612a64565b905092915050565b6000602082019050612e226000830184612ace565b92915050565b6000602082019050612e3d6000830184612add565b92915050565b6000608082019050612e586000830187612add565b612e656020830186612ace565b612e726040830185612495565b8181036060830152612e848184612573565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715612eb257600080fd5b8060405250919050565b600067ffffffffffffffff821115612ed357600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612f7a82612fd6565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050612fd1826130d9565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061301882613031565b9050919050565b600061302a82612fc3565b9050919050565b600061303c82613043565b9050919050565b600061304e82612fd6565b9050919050565b82818337600083830152505050565b60005b83811015613082578082015181840152602081019050613067565b83811115613091576000848401525b50505050565b60006130a2826130a9565b9050919050565b60006130b4826130cc565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b600481106130e357fe5b50565b6130ef81612f6f565b81146130fa57600080fd5b50565b61310681612f8d565b811461311157600080fd5b50565b61311d81612f97565b811461312857600080fd5b50565b61313481612ff6565b811461313f57600080fd5b50565b61314b81613000565b811461315657600080fd5b5056fea26469706673582212202fa9932869f66bd3c682855a970b48eca1c9eb58cc1b356bd40beb17f789922e64736f6c63430006040033"
