// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Bridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeDepositProposal is an auto generated low-level Go binding around an user-defined struct.
type BridgeDepositProposal struct {
	DataHash [32]byte
	YesVotes []common.Address
	NoVotes  []common.Address
	Status   uint8
}

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"DepositProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"DepositProposalFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"DepositProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"RelayerThresholdProposalVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposedValue\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositProposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnDepositProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerContract\",\"outputs\":[{\"internalType\":\"contractIRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRelayerThresholdProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.RelayerThresholdProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"}],\"name\":\"getDepositProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumBridge.DepositProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"internalType\":\"structBridge.DepositProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"createDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originChainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationChainHandlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeDepositProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"}],\"name\":\"createRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumBridge.Vote\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteRelayerThresholdProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b5060405162003444380380620034448339818101604052810190620000379190620000bd565b8260008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555050505062000185565b600081519050620000a08162000151565b92915050565b600081519050620000b7816200016b565b92915050565b600080600060608486031215620000d357600080fd5b6000620000e386828701620000a6565b9350506020620000f6868287016200008f565b92505060406200010986828701620000a6565b9150509250925092565b6000620001208262000127565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200015c8162000113565b81146200016857600080fd5b50565b620001768162000147565b81146200018257600080fd5b50565b6132af80620001956000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063cb4815e011610097578063e9cdaead11610066578063e9cdaead146102c3578063ea059625146102df578063faa9bce9146102fd578063fe6121361461031957610100565b8063cb4815e01461023d578063d7a9cd791461026d578063df2690601461028b578063e7d3696c146102a757610100565b8063941861b5116100d3578063941861b51461018e578063b06e1cc3146101be578063ba391573146101ef578063beab71311461021f57610100565b8063030e7ddd146101055780632d994e1f146101215780635f31b69c1461013d578063613d88071461015e575b600080fd5b61011f600480360381019061011a919061241b565b610338565b005b61013b60048036038101906101369190612496565b610552565b005b6101456109d2565b6040516101559493929190612ea2565b60405180910390f35b61017860048036038101906101739190612390565b610b19565b6040516101859190612c20565b60405180910390f35b6101a860048036038101906101a391906123cc565b610bd6565b6040516101b59190612bc1565b60405180910390f35b6101d860048036038101906101d39190612390565b610c12565b6040516101e6929190612bf7565b60405180910390f35b610209600480360381019061020491906122d7565b610c50565b6040516102169190612e87565b60405180910390f35b610227610c68565b6040516102349190612e87565b60405180910390f35b61025760048036038101906102529190612390565b610c6e565b6040516102649190612e65565b60405180910390f35b610275610e00565b6040516102829190612e87565b60405180910390f35b6102a560048036038101906102a091906122d7565b610e06565b005b6102c160048036038101906102bc91906124e5565b611295565b005b6102dd60048036038101906102d891906122ae565b6118cb565b005b6102e7611df5565b6040516102f49190612c64565b60405180910390f35b61031760048036038101906103129190612329565b611e1b565b005b610321611f47565b60405161032f929190612ef5565b60405180910390f35b6000600a600080548152602001908152602001600020600085815260200190815260200160002090506000600481111561036e57fe5b8160030160009054906101000a900460ff16600481111561038b57fe5b14156103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c390612ce5565b60405180910390fd5b600360048111156103d957fe5b8160030160009054906101000a900460ff1660048111156103f657fe5b14610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d90612de5565b60405180910390fd5b8060000154828051906020012014610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90612d85565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b81526004016104c19190612c42565b600060405180830381600087803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b5050505060048260030160006101000a81548160ff0219169083600481111561051457fe5b021790555084600054877f4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d0760405160405180910390a4505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016105b29190612ba6565b602060405180830381600087803b1580156105cc57600080fd5b505af11580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190612285565b610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90612e05565b60405180910390fd5b6000600481111561065057fe5b600a6000868152602001908152602001600020600085815260200190815260200160002060030160009054906101000a900460ff16600481111561069057fe5b14806106e65750600260048111156106a457fe5b600a6000868152602001908152602001600020600085815260200190815260200160002060030160009054906101000a900460ff1660048111156106e457fe5b145b610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90612d05565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156107665781602001602082028036833780820191505090505b508152602001600060405190808252806020026020018201604052801561079c5781602001602082028036833780820191505090505b508152602001600160048111156107af57fe5b815250600a600086815260200190815260200160002060008581526020019081526020016000206000820151816000015560208201518160010190805190602001906107fc92919061200b565b50604082015181600201908051906020019061081992919061200b565b5060608201518160030160006101000a81548160ff0219169083600481111561083e57fe5b021790555090505060016002541161089a576003600a6000868152602001908152602001600020600085815260200190815260200160002060030160006101000a81548160ff0219169083600481111561089457fe5b02179055505b33600a600086815260200190815260200160002060008581526020019081526020016000206001016000815481106108ce57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082846000547f376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9856040516109c49190612bdc565b60405180910390a450505050565b60006060806000600360000154600360020160038001600360040160009054906101000a900460ff1682805480602002602001604051908101604052809291908181526020018280548015610a7c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a32575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610b0457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aba575b50505050509150935093509350935090919293565b6009602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bce5780601f10610ba357610100808354040283529160200191610bce565b820191906000526020600020905b815481529060010190602001808311610bb157829003601f168201915b505050505081565b600b602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60086020528060005260406000206000915090505481565b60005481565b610c76612095565b600a600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d3457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610cea575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610dc257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d78575b505050505081526020016003820160009054906101000a900460ff166004811115610de957fe5b6004811115610df457fe5b81525050905092915050565b60025481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b8152600401610e669190612ba6565b602060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb89190612285565b610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90612e05565b60405180910390fd5b60006001811115610f0457fe5b600360040160009054906101000a900460ff166001811115610f2257fe5b14610f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5990612e25565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fcc57600080fd5b505af1158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612300565b821115611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90612d45565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156110875781602001602082028036833780820191505090505b50815260200160006040519080825280602002602001820160405280156110bd5781602001602082028036833780820191505090505b5081526020016001808111156110cf57fe5b81525060036000820151816000015560208201518160020190805190602001906110fa92919061200b565b50604082015181600301908051906020019061111792919061200b565b5060608201518160040160006101000a81548160ff0219169083600181111561113c57fe5b02179055509050506001600254116111af576003600001546002819055506000600360040160006101000a81548160ff0219169083600181111561117c57fe5b0217905550817fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a25b3360036002016000815481106111c157fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550817f79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d60405160405180910390a25050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016112f59190612ba6565b602060405180830381600087803b15801561130f57600080fd5b505af1158015611323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113479190612285565b611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612e05565b60405180910390fd5b6000600a600086815260200190815260200160002060008581526020019081526020016000209050600060048111156113bb57fe5b8160030160009054906101000a900460ff1660048111156113d857fe5b1415611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141090612ce5565b60405180910390fd5b6001600481111561142657fe5b8160030160009054906101000a900460ff16600481111561144357fe5b14611483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147a90612d25565b60405180910390fd5b600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990612d65565b60405180910390fd5b600183600181111561154057fe5b60ff161115611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b90612dc5565b60405180910390fd5b60018081111561159057fe5b83600181111561159c57fe5b141561160c5780600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611672565b80600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600b6000878152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002548160010180549050106117585760038160030160006101000a81548160ff0219169083600481111561171d57fe5b021790555083856000547fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a4611875565b6002546118168260020180549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118089190612300565b611f6690919063ffffffff16565b10156118745760028160030160006101000a81548160ff0219169083600481111561183d57fe5b021790555083856000547fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a45b5b83856000547f8bb636a89dc9b59641fa0cf3c869e9c6c7df7f5a0bac2345aaa2d5bdc598b768868560030160009054906101000a900460ff166040516118bc929190612c9a565b60405180910390a45050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b815260040161192b9190612ba6565b602060405180830381600087803b15801561194557600080fd5b505af1158015611959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d9190612285565b6119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b390612e05565b60405180910390fd5b6001808111156119c857fe5b600360040160009054906101000a900460ff1660018111156119e657fe5b14611a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1d90612da5565b60405180910390fd5b600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aad90612d65565b60405180910390fd5b6001826001811115611ac457fe5b60ff161115611b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aff90612e45565b60405180910390fd5b600180811115611b1457fe5b826001811115611b2057fe5b1415611b91576003600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611bf7565b60038001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb182604051611c819190612c7f565b60405180910390a160025460036002018054905010611d04576003600001546002819055506000600360040160006101000a81548160ff02191690836001811115611cc857fe5b02179055506003600001547fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a2611df1565b600254611dc26003800180549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611d7c57600080fd5b505af1158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db49190612300565b611f6690919063ffffffff16565b1015611df0576000600360040160006101000a81548160ff02191690836001811115611dea57fe5b02179055505b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060086000858152602001908152602001600020600081546001019190508190559050816009600086815260200190815260200160002060008381526020019081526020016000209080519060200190611e779291906120cb565b5060008390508073ffffffffffffffffffffffffffffffffffffffff1663cb65d221868433876040518563ffffffff1660e01b8152600401611ebc9493929190612f1e565b600060405180830381600087803b158015611ed657600080fd5b505af1158015611eea573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16856000547f9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f047695985604051611f389190612e87565b60405180910390a45050505050565b60038060000154908060040160009054906101000a900460ff16905082565b6000611fa883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fb0565b905092915050565b6000838311158290611ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fef9190612cc3565b60405180910390fd5b5060008385039050809150509392505050565b828054828255906000526020600020908101928215612084579160200282015b828111156120835782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061202b565b5b509050612091919061214b565b5090565b6040518060800160405280600080191681526020016060815260200160608152602001600060048111156120c557fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061210c57805160ff191683800117855561213a565b8280016001018555821561213a579182015b8281111561213957825182559160200191906001019061211e565b5b509050612147919061218e565b5090565b61218b91905b8082111561218757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101612151565b5090565b90565b6121b091905b808211156121ac576000816000905550600101612194565b5090565b90565b6000813590506121c28161320d565b92915050565b6000815190506121d781613224565b92915050565b6000813590506121ec8161323b565b92915050565b600082601f83011261220357600080fd5b813561221661221182612f97565b612f6a565b9150808252602083016020830185838301111561223257600080fd5b61223d838284613193565b50505092915050565b60008135905061225581613252565b92915050565b60008135905061226a81613262565b92915050565b60008151905061227f81613262565b92915050565b60006020828403121561229757600080fd5b60006122a5848285016121c8565b91505092915050565b6000602082840312156122c057600080fd5b60006122ce84828501612246565b91505092915050565b6000602082840312156122e957600080fd5b60006122f78482850161225b565b91505092915050565b60006020828403121561231257600080fd5b600061232084828501612270565b91505092915050565b60008060006060848603121561233e57600080fd5b600061234c8682870161225b565b935050602061235d868287016121b3565b925050604084013567ffffffffffffffff81111561237a57600080fd5b612386868287016121f2565b9150509250925092565b600080604083850312156123a357600080fd5b60006123b18582860161225b565b92505060206123c28582860161225b565b9150509250929050565b6000806000606084860312156123e157600080fd5b60006123ef8682870161225b565b93505060206124008682870161225b565b9250506040612411868287016121b3565b9150509250925092565b6000806000806080858703121561243157600080fd5b600061243f8782880161225b565b94505060206124508782880161225b565b9350506040612461878288016121b3565b925050606085013567ffffffffffffffff81111561247e57600080fd5b61248a878288016121f2565b91505092959194509250565b6000806000606084860312156124ab57600080fd5b60006124b98682870161225b565b93505060206124ca8682870161225b565b92505060406124db868287016121dd565b9150509250925092565b6000806000606084860312156124fa57600080fd5b60006125088682870161225b565b93505060206125198682870161225b565b925050604061252a86828701612246565b9150509250925092565b6000612540838361255b565b60208301905092915050565b61255581613103565b82525050565b61256481613078565b82525050565b600061257582612fee565b61257f8185613045565b935061258a83612fd3565b8060005b838110156125bb5781516125a28882612534565b97506125ad83613027565b92505060018101905061258e565b5085935050505092915050565b60006125d382612fe3565b6125dd8185613034565b93506125e883612fc3565b8060005b838110156126195781516126008882612534565b975061260b8361301a565b9250506001810190506125ec565b5085935050505092915050565b61262f8161308a565b82525050565b61263e81613096565b82525050565b61264d81613096565b82525050565b600061265e82613004565b6126688185613056565b93506126788185602086016131a2565b612681816131d5565b840191505092915050565b600061269782612ff9565b6126a18185613056565b93506126b18185602086016131a2565b6126ba816131d5565b840191505092915050565b6126ce81613115565b82525050565b6126dd81613139565b82525050565b6126ec81613139565b82525050565b6126fb8161314b565b82525050565b61270a8161315d565b82525050565b600061271b8261300f565b6127258185613067565b93506127358185602086016131a2565b61273e816131d5565b840191505092915050565b6000612756601683613067565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b6000612796604a83613067565b91507f70726f706f73616c206973206569746865722063757272656e746c792061637460008301527f697665206f722068617320616c7265616479206265656e207061737365642f7460208301527f72616e73666572726564000000000000000000000000000000000000000000006040830152606082019050919050565b6000612822601b83613067565b91507f70726f706f73616c20686173206265656e2066696e616c697a656400000000006000830152602082019050919050565b6000612862604283613067565b91507f70726f706f7365642076616c75652063616e6e6f74206265206772656174657260008301527f207468616e2074686520746f74616c206e756d626572206f662072656c61796560208301527f72730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006128ee601983613067565b91507f72656c617965722068617320616c726561647920766f746564000000000000006000830152602082019050919050565b600061292e603183613067565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b6000612994601f83613067565b91507f6e6f2070726f706f73616c2069732063757272656e746c7920616374697665006000830152602082019050919050565b60006129d4600c83613067565b91507f696e76616c696420766f746500000000000000000000000000000000000000006000830152602082019050919050565b6000612a14603783613067565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b6000612a7a601883613067565b91507f73656e646572206d75737420626520612072656c6179657200000000000000006000830152602082019050919050565b6000612aba601e83613067565b91507f612070726f706f73616c2069732063757272656e746c792061637469766500006000830152602082019050919050565b6000612afa601f83613067565b91507f766f7465206f7574206f662074686520766f746520656e756d2072616e6765006000830152602082019050919050565b6000608083016000830151612b456000860182612635565b5060208301518482036020860152612b5d82826125c8565b91505060408301518482036040860152612b7782826125c8565b9150506060830151612b8c60608601826126d4565b508091505092915050565b612ba0816130f9565b82525050565b6000602082019050612bbb600083018461254c565b92915050565b6000602082019050612bd66000830184612626565b92915050565b6000602082019050612bf16000830184612644565b92915050565b6000604082019050612c0c6000830185612644565b612c1960208301846126e3565b9392505050565b60006020820190508181036000830152612c3a818461268c565b905092915050565b60006020820190508181036000830152612c5c8184612653565b905092915050565b6000602082019050612c7960008301846126c5565b92915050565b6000602082019050612c946000830184612701565b92915050565b6000604082019050612caf6000830185612701565b612cbc60208301846126e3565b9392505050565b60006020820190508181036000830152612cdd8184612710565b905092915050565b60006020820190508181036000830152612cfe81612749565b9050919050565b60006020820190508181036000830152612d1e81612789565b9050919050565b60006020820190508181036000830152612d3e81612815565b9050919050565b60006020820190508181036000830152612d5e81612855565b9050919050565b60006020820190508181036000830152612d7e816128e1565b9050919050565b60006020820190508181036000830152612d9e81612921565b9050919050565b60006020820190508181036000830152612dbe81612987565b9050919050565b60006020820190508181036000830152612dde816129c7565b9050919050565b60006020820190508181036000830152612dfe81612a07565b9050919050565b60006020820190508181036000830152612e1e81612a6d565b9050919050565b60006020820190508181036000830152612e3e81612aad565b9050919050565b60006020820190508181036000830152612e5e81612aed565b9050919050565b60006020820190508181036000830152612e7f8184612b2d565b905092915050565b6000602082019050612e9c6000830184612b97565b92915050565b6000608082019050612eb76000830187612b97565b8181036020830152612ec9818661256a565b90508181036040830152612edd818561256a565b9050612eec60608301846126f2565b95945050505050565b6000604082019050612f0a6000830185612b97565b612f1760208301846126f2565b9392505050565b6000608082019050612f336000830187612b97565b612f406020830186612b97565b612f4d604083018561254c565b8181036060830152612f5f8184612653565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715612f8d57600080fd5b8060405250919050565b600067ffffffffffffffff821115612fae57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613083826130d9565b9050919050565b60008115159050919050565b6000819050919050565b60008190506130ae826131e6565b919050565b60008190506130c1826131f3565b919050565b60008190506130d482613200565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061310e8261316f565b9050919050565b600061312082613127565b9050919050565b6000613132826130d9565b9050919050565b6000613144826130a0565b9050919050565b6000613156826130b3565b9050919050565b6000613168826130c6565b9050919050565b600061317a82613181565b9050919050565b600061318c826130d9565b9050919050565b82818337600083830152505050565b60005b838110156131c05780820151818401526020810190506131a5565b838111156131cf576000848401525b50505050565b6000601f19601f8301169050919050565b600581106131f057fe5b50565b600281106131fd57fe5b50565b6002811061320a57fe5b50565b61321681613078565b811461322157600080fd5b50565b61322d8161308a565b811461323857600080fd5b50565b61324481613096565b811461324f57600080fd5b50565b6002811061325f57600080fd5b50565b61326b816130f9565b811461327657600080fd5b5056fea26469706673582212201f4a193b518286955a60a311b73d4bc94a6cf8dd265e6cdaf64233cebfd3bd4c64736f6c63430006040033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID *big.Int, relayerContract common.Address, initialRelayerThreshold *big.Int) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, chainID, relayerContract, initialRelayerThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint256)
func (_Bridge *BridgeCaller) ChainID(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_chainID")
	return *ret0, err
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint256)
func (_Bridge *BridgeSession) ChainID() (*big.Int, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() constant returns(uint256)
func (_Bridge *BridgeCallerSession) ChainID() (*big.Int, error) {
	return _Bridge.Contract.ChainID(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCaller) CurrentRelayerThresholdProposal(opts *bind.CallOpts) (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	ret := new(struct {
		ProposedValue *big.Int
		Status        uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_currentRelayerThresholdProposal")
	return *ret, err
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// CurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0xfe612136.
//
// Solidity: function _currentRelayerThresholdProposal() constant returns(uint256 _proposedValue, uint8 _status)
func (_Bridge *BridgeCallerSession) CurrentRelayerThresholdProposal() (struct {
	ProposedValue *big.Int
	Status        uint8
}, error) {
	return _Bridge.Contract.CurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeCaller) DepositCounts(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositCounts", arg0)
	return *ret0, err
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeSession) DepositCounts(arg0 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositCounts is a free data retrieval call binding the contract method 0xba391573.
//
// Solidity: function _depositCounts(uint256 ) constant returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCounts(arg0 *big.Int) (*big.Int, error) {
	return _Bridge.Contract.DepositCounts(&_Bridge.CallOpts, arg0)
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCaller) DepositProposals(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	ret := new(struct {
		DataHash [32]byte
		Status   uint8
	})
	out := ret
	err := _Bridge.contract.Call(opts, out, "_depositProposals", arg0, arg1)
	return *ret, err
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeSession) DepositProposals(arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositProposals is a free data retrieval call binding the contract method 0xb06e1cc3.
//
// Solidity: function _depositProposals(uint256 , uint256 ) constant returns(bytes32 _dataHash, uint8 _status)
func (_Bridge *BridgeCallerSession) DepositProposals(arg0 *big.Int, arg1 *big.Int) (struct {
	DataHash [32]byte
	Status   uint8
}, error) {
	return _Bridge.Contract.DepositProposals(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_depositRecords", arg0, arg1)
	return *ret0, err
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeSession) DepositRecords(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x613d8807.
//
// Solidity: function _depositRecords(uint256 , uint256 ) constant returns(bytes)
func (_Bridge *BridgeCallerSession) DepositRecords(arg0 *big.Int, arg1 *big.Int) ([]byte, error) {
	return _Bridge.Contract.DepositRecords(&_Bridge.CallOpts, arg0, arg1)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCaller) HasVotedOnDepositProposal(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_hasVotedOnDepositProposal", arg0, arg1, arg2)
	return *ret0, err
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeSession) HasVotedOnDepositProposal(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnDepositProposal is a free data retrieval call binding the contract method 0x941861b5.
//
// Solidity: function _hasVotedOnDepositProposal(uint256 , uint256 , address ) constant returns(bool)
func (_Bridge *BridgeCallerSession) HasVotedOnDepositProposal(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _Bridge.Contract.HasVotedOnDepositProposal(&_Bridge.CallOpts, arg0, arg1, arg2)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCaller) RelayerContract(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerContract")
	return *ret0, err
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerContract is a free data retrieval call binding the contract method 0xea059625.
//
// Solidity: function _relayerContract() constant returns(address)
func (_Bridge *BridgeCallerSession) RelayerContract() (common.Address, error) {
	return _Bridge.Contract.RelayerContract(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "_relayerThreshold")
	return *ret0, err
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() constant returns(uint256)
func (_Bridge *BridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _Bridge.Contract.RelayerThreshold(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCaller) GetCurrentRelayerThresholdProposal(opts *bind.CallOpts) (*big.Int, []common.Address, []common.Address, uint8, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([]common.Address)
		ret2 = new([]common.Address)
		ret3 = new(uint8)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _Bridge.contract.Call(opts, out, "getCurrentRelayerThresholdProposal")
	return *ret0, *ret1, *ret2, *ret3, err
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetCurrentRelayerThresholdProposal is a free data retrieval call binding the contract method 0x5f31b69c.
//
// Solidity: function getCurrentRelayerThresholdProposal() constant returns(uint256, address[], address[], uint8)
func (_Bridge *BridgeCallerSession) GetCurrentRelayerThresholdProposal() (*big.Int, []common.Address, []common.Address, uint8, error) {
	return _Bridge.Contract.GetCurrentRelayerThresholdProposal(&_Bridge.CallOpts)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCaller) GetDepositProposal(opts *bind.CallOpts, destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	var (
		ret0 = new(BridgeDepositProposal)
	)
	out := ret0
	err := _Bridge.contract.Call(opts, out, "getDepositProposal", destinationChainID, depositNonce)
	return *ret0, err
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeSession) GetDepositProposal(destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// GetDepositProposal is a free data retrieval call binding the contract method 0xcb4815e0.
//
// Solidity: function getDepositProposal(uint256 destinationChainID, uint256 depositNonce) constant returns(BridgeDepositProposal)
func (_Bridge *BridgeCallerSession) GetDepositProposal(destinationChainID *big.Int, depositNonce *big.Int) (BridgeDepositProposal, error) {
	return _Bridge.Contract.GetDepositProposal(&_Bridge.CallOpts, destinationChainID, depositNonce)
}

// CreateDepositProposal is a paid mutator transaction binding the contract method 0x2d994e1f.
//
// Solidity: function createDepositProposal(uint256 destinationChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactor) CreateDepositProposal(opts *bind.TransactOpts, destinationChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "createDepositProposal", destinationChainID, depositNonce, dataHash)
}

// CreateDepositProposal is a paid mutator transaction binding the contract method 0x2d994e1f.
//
// Solidity: function createDepositProposal(uint256 destinationChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeSession) CreateDepositProposal(destinationChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.CreateDepositProposal(&_Bridge.TransactOpts, destinationChainID, depositNonce, dataHash)
}

// CreateDepositProposal is a paid mutator transaction binding the contract method 0x2d994e1f.
//
// Solidity: function createDepositProposal(uint256 destinationChainID, uint256 depositNonce, bytes32 dataHash) returns()
func (_Bridge *BridgeTransactorSession) CreateDepositProposal(destinationChainID *big.Int, depositNonce *big.Int, dataHash [32]byte) (*types.Transaction, error) {
	return _Bridge.Contract.CreateDepositProposal(&_Bridge.TransactOpts, destinationChainID, depositNonce, dataHash)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactor) CreateRelayerThresholdProposal(opts *bind.TransactOpts, proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "createRelayerThresholdProposal", proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// CreateRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xdf269060.
//
// Solidity: function createRelayerThresholdProposal(uint256 proposedValue) returns()
func (_Bridge *BridgeTransactorSession) CreateRelayerThresholdProposal(proposedValue *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.CreateRelayerThresholdProposal(&_Bridge.TransactOpts, proposedValue)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) Deposit(destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// Deposit is a paid mutator transaction binding the contract method 0xfaa9bce9.
//
// Solidity: function deposit(uint256 destinationChainID, address originChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) Deposit(destinationChainID *big.Int, originChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, destinationChainID, originChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactor) ExecuteDepositProposal(opts *bind.TransactOpts, originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "executeDepositProposal", originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeSession) ExecuteDepositProposal(originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// ExecuteDepositProposal is a paid mutator transaction binding the contract method 0x030e7ddd.
//
// Solidity: function executeDepositProposal(uint256 originChainID, uint256 depositNonce, address destinationChainHandlerAddress, bytes data) returns()
func (_Bridge *BridgeTransactorSession) ExecuteDepositProposal(originChainID *big.Int, depositNonce *big.Int, destinationChainHandlerAddress common.Address, data []byte) (*types.Transaction, error) {
	return _Bridge.Contract.ExecuteDepositProposal(&_Bridge.TransactOpts, originChainID, depositNonce, destinationChainHandlerAddress, data)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xe7d3696c.
//
// Solidity: function voteDepositProposal(uint256 destinationChainID, uint256 depositNonce, uint8 vote) returns()
func (_Bridge *BridgeTransactor) VoteDepositProposal(opts *bind.TransactOpts, destinationChainID *big.Int, depositNonce *big.Int, vote uint8) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteDepositProposal", destinationChainID, depositNonce, vote)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xe7d3696c.
//
// Solidity: function voteDepositProposal(uint256 destinationChainID, uint256 depositNonce, uint8 vote) returns()
func (_Bridge *BridgeSession) VoteDepositProposal(destinationChainID *big.Int, depositNonce *big.Int, vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, destinationChainID, depositNonce, vote)
}

// VoteDepositProposal is a paid mutator transaction binding the contract method 0xe7d3696c.
//
// Solidity: function voteDepositProposal(uint256 destinationChainID, uint256 depositNonce, uint8 vote) returns()
func (_Bridge *BridgeTransactorSession) VoteDepositProposal(destinationChainID *big.Int, depositNonce *big.Int, vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteDepositProposal(&_Bridge.TransactOpts, destinationChainID, depositNonce, vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactor) VoteRelayerThresholdProposal(opts *bind.TransactOpts, vote uint8) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "voteRelayerThresholdProposal", vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// VoteRelayerThresholdProposal is a paid mutator transaction binding the contract method 0xe9cdaead.
//
// Solidity: function voteRelayerThresholdProposal(uint8 vote) returns()
func (_Bridge *BridgeTransactorSession) VoteRelayerThresholdProposal(vote uint8) (*types.Transaction, error) {
	return _Bridge.Contract.VoteRelayerThresholdProposal(&_Bridge.TransactOpts, vote)
}

// BridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Bridge contract.
type BridgeDepositIterator struct {
	Event *BridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDeposit represents a Deposit event raised by the Bridge contract.
type BridgeDeposit struct {
	OriginChainID             *big.Int
	DestinationChainID        *big.Int
	OriginChainHandlerAddress common.Address
	DepositNonce              *big.Int
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f0476959.
//
// Solidity: event Deposit(uint256 indexed originChainID, uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 depositNonce)
func (_Bridge *BridgeFilterer) FilterDeposit(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, originChainHandlerAddress []common.Address) (*BridgeDepositIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Deposit", originChainIDRule, destinationChainIDRule, originChainHandlerAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositIterator{contract: _Bridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f0476959.
//
// Solidity: event Deposit(uint256 indexed originChainID, uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 depositNonce)
func (_Bridge *BridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *BridgeDeposit, originChainID []*big.Int, destinationChainID []*big.Int, originChainHandlerAddress []common.Address) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var originChainHandlerAddressRule []interface{}
	for _, originChainHandlerAddressItem := range originChainHandlerAddress {
		originChainHandlerAddressRule = append(originChainHandlerAddressRule, originChainHandlerAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Deposit", originChainIDRule, destinationChainIDRule, originChainHandlerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDeposit)
				if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f0476959.
//
// Solidity: event Deposit(uint256 indexed originChainID, uint256 indexed destinationChainID, address indexed originChainHandlerAddress, uint256 depositNonce)
func (_Bridge *BridgeFilterer) ParseDeposit(log types.Log) (*BridgeDeposit, error) {
	event := new(BridgeDeposit)
	if err := _Bridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalCreatedIterator is returned from FilterDepositProposalCreated and is used to iterate over the raw logs and unpacked data for DepositProposalCreated events raised by the Bridge contract.
type BridgeDepositProposalCreatedIterator struct {
	Event *BridgeDepositProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalCreated represents a DepositProposalCreated event raised by the Bridge contract.
type BridgeDepositProposalCreated struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	DataHash           [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalCreated is a free log retrieval operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) FilterDepositProposalCreated(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalCreatedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalCreatedIterator{contract: _Bridge.contract, event: "DepositProposalCreated", logs: logs, sub: sub}, nil
}

// WatchDepositProposalCreated is a free log subscription operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) WatchDepositProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalCreated, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalCreated", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalCreated is a log parse operation binding the contract event 0x376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9.
//
// Solidity: event DepositProposalCreated(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, bytes32 dataHash)
func (_Bridge *BridgeFilterer) ParseDepositProposalCreated(log types.Log) (*BridgeDepositProposalCreated, error) {
	event := new(BridgeDepositProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalExecutedIterator is returned from FilterDepositProposalExecuted and is used to iterate over the raw logs and unpacked data for DepositProposalExecuted events raised by the Bridge contract.
type BridgeDepositProposalExecutedIterator struct {
	Event *BridgeDepositProposalExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalExecuted represents a DepositProposalExecuted event raised by the Bridge contract.
type BridgeDepositProposalExecuted struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalExecuted is a free log retrieval operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalExecuted(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalExecutedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalExecutedIterator{contract: _Bridge.contract, event: "DepositProposalExecuted", logs: logs, sub: sub}, nil
}

// WatchDepositProposalExecuted is a free log subscription operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalExecuted(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalExecuted, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalExecuted", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalExecuted)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalExecuted is a log parse operation binding the contract event 0x4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d07.
//
// Solidity: event DepositProposalExecuted(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalExecuted(log types.Log) (*BridgeDepositProposalExecuted, error) {
	event := new(BridgeDepositProposalExecuted)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalExecuted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalFinalizedIterator is returned from FilterDepositProposalFinalized and is used to iterate over the raw logs and unpacked data for DepositProposalFinalized events raised by the Bridge contract.
type BridgeDepositProposalFinalizedIterator struct {
	Event *BridgeDepositProposalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalFinalized represents a DepositProposalFinalized event raised by the Bridge contract.
type BridgeDepositProposalFinalized struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalFinalized is a free log retrieval operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) FilterDepositProposalFinalized(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalFinalizedIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalFinalizedIterator{contract: _Bridge.contract, event: "DepositProposalFinalized", logs: logs, sub: sub}, nil
}

// WatchDepositProposalFinalized is a free log subscription operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) WatchDepositProposalFinalized(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalFinalized, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalFinalized", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalFinalized)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalFinalized is a log parse operation binding the contract event 0xd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa.
//
// Solidity: event DepositProposalFinalized(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce)
func (_Bridge *BridgeFilterer) ParseDepositProposalFinalized(log types.Log) (*BridgeDepositProposalFinalized, error) {
	event := new(BridgeDepositProposalFinalized)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalFinalized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeDepositProposalVoteIterator is returned from FilterDepositProposalVote and is used to iterate over the raw logs and unpacked data for DepositProposalVote events raised by the Bridge contract.
type BridgeDepositProposalVoteIterator struct {
	Event *BridgeDepositProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeDepositProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeDepositProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeDepositProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeDepositProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeDepositProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeDepositProposalVote represents a DepositProposalVote event raised by the Bridge contract.
type BridgeDepositProposalVote struct {
	OriginChainID      *big.Int
	DestinationChainID *big.Int
	DepositNonce       *big.Int
	Vote               uint8
	Status             uint8
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDepositProposalVote is a free log retrieval operation binding the contract event 0x8bb636a89dc9b59641fa0cf3c869e9c6c7df7f5a0bac2345aaa2d5bdc598b768.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 vote, uint8 status)
func (_Bridge *BridgeFilterer) FilterDepositProposalVote(opts *bind.FilterOpts, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (*BridgeDepositProposalVoteIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &BridgeDepositProposalVoteIterator{contract: _Bridge.contract, event: "DepositProposalVote", logs: logs, sub: sub}, nil
}

// WatchDepositProposalVote is a free log subscription operation binding the contract event 0x8bb636a89dc9b59641fa0cf3c869e9c6c7df7f5a0bac2345aaa2d5bdc598b768.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 vote, uint8 status)
func (_Bridge *BridgeFilterer) WatchDepositProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeDepositProposalVote, originChainID []*big.Int, destinationChainID []*big.Int, depositNonce []*big.Int) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "DepositProposalVote", originChainIDRule, destinationChainIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeDepositProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositProposalVote is a log parse operation binding the contract event 0x8bb636a89dc9b59641fa0cf3c869e9c6c7df7f5a0bac2345aaa2d5bdc598b768.
//
// Solidity: event DepositProposalVote(uint256 indexed originChainID, uint256 indexed destinationChainID, uint256 indexed depositNonce, uint8 vote, uint8 status)
func (_Bridge *BridgeFilterer) ParseDepositProposalVote(log types.Log) (*BridgeDepositProposalVote, error) {
	event := new(BridgeDepositProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "DepositProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the Bridge contract.
type BridgeRelayerThresholdChangedIterator struct {
	Event *BridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the Bridge contract.
type BridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*BridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdChangedIterator{contract: _Bridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdChanged)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*BridgeRelayerThresholdChanged, error) {
	event := new(BridgeRelayerThresholdChanged)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalCreatedIterator is returned from FilterRelayerThresholdProposalCreated and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalCreated events raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreatedIterator struct {
	Event *BridgeRelayerThresholdProposalCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalCreated represents a RelayerThresholdProposalCreated event raised by the Bridge contract.
type BridgeRelayerThresholdProposalCreated struct {
	ProposedValue *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalCreated is a free log retrieval operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalCreated(opts *bind.FilterOpts, proposedValue []*big.Int) (*BridgeRelayerThresholdProposalCreatedIterator, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalCreatedIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalCreated", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalCreated is a free log subscription operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalCreated(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalCreated, proposedValue []*big.Int) (event.Subscription, error) {

	var proposedValueRule []interface{}
	for _, proposedValueItem := range proposedValue {
		proposedValueRule = append(proposedValueRule, proposedValueItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalCreated", proposedValueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalCreated)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalCreated is a log parse operation binding the contract event 0x79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d.
//
// Solidity: event RelayerThresholdProposalCreated(uint256 indexed proposedValue)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalCreated(log types.Log) (*BridgeRelayerThresholdProposalCreated, error) {
	event := new(BridgeRelayerThresholdProposalCreated)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalCreated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeRelayerThresholdProposalVoteIterator is returned from FilterRelayerThresholdProposalVote and is used to iterate over the raw logs and unpacked data for RelayerThresholdProposalVote events raised by the Bridge contract.
type BridgeRelayerThresholdProposalVoteIterator struct {
	Event *BridgeRelayerThresholdProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRelayerThresholdProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRelayerThresholdProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRelayerThresholdProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRelayerThresholdProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRelayerThresholdProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRelayerThresholdProposalVote represents a RelayerThresholdProposalVote event raised by the Bridge contract.
type BridgeRelayerThresholdProposalVote struct {
	Vote uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdProposalVote is a free log retrieval operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) FilterRelayerThresholdProposalVote(opts *bind.FilterOpts) (*BridgeRelayerThresholdProposalVoteIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return &BridgeRelayerThresholdProposalVoteIterator{contract: _Bridge.contract, event: "RelayerThresholdProposalVote", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdProposalVote is a free log subscription operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) WatchRelayerThresholdProposalVote(opts *bind.WatchOpts, sink chan<- *BridgeRelayerThresholdProposalVote) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RelayerThresholdProposalVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRelayerThresholdProposalVote)
				if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdProposalVote is a log parse operation binding the contract event 0xe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb1.
//
// Solidity: event RelayerThresholdProposalVote(uint8 vote)
func (_Bridge *BridgeFilterer) ParseRelayerThresholdProposalVote(log types.Log) (*BridgeRelayerThresholdProposalVote, error) {
	event := new(BridgeRelayerThresholdProposalVote)
	if err := _Bridge.contract.UnpackLog(event, "RelayerThresholdProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}
var RuntimeBytecode = "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063cb4815e011610097578063e9cdaead11610066578063e9cdaead146102c3578063ea059625146102df578063faa9bce9146102fd578063fe6121361461031957610100565b8063cb4815e01461023d578063d7a9cd791461026d578063df2690601461028b578063e7d3696c146102a757610100565b8063941861b5116100d3578063941861b51461018e578063b06e1cc3146101be578063ba391573146101ef578063beab71311461021f57610100565b8063030e7ddd146101055780632d994e1f146101215780635f31b69c1461013d578063613d88071461015e575b600080fd5b61011f600480360381019061011a919061241b565b610338565b005b61013b60048036038101906101369190612496565b610552565b005b6101456109d2565b6040516101559493929190612ea2565b60405180910390f35b61017860048036038101906101739190612390565b610b19565b6040516101859190612c20565b60405180910390f35b6101a860048036038101906101a391906123cc565b610bd6565b6040516101b59190612bc1565b60405180910390f35b6101d860048036038101906101d39190612390565b610c12565b6040516101e6929190612bf7565b60405180910390f35b610209600480360381019061020491906122d7565b610c50565b6040516102169190612e87565b60405180910390f35b610227610c68565b6040516102349190612e87565b60405180910390f35b61025760048036038101906102529190612390565b610c6e565b6040516102649190612e65565b60405180910390f35b610275610e00565b6040516102829190612e87565b60405180910390f35b6102a560048036038101906102a091906122d7565b610e06565b005b6102c160048036038101906102bc91906124e5565b611295565b005b6102dd60048036038101906102d891906122ae565b6118cb565b005b6102e7611df5565b6040516102f49190612c64565b60405180910390f35b61031760048036038101906103129190612329565b611e1b565b005b610321611f47565b60405161032f929190612ef5565b60405180910390f35b6000600a600080548152602001908152602001600020600085815260200190815260200160002090506000600481111561036e57fe5b8160030160009054906101000a900460ff16600481111561038b57fe5b14156103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c390612ce5565b60405180910390fd5b600360048111156103d957fe5b8160030160009054906101000a900460ff1660048111156103f657fe5b14610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d90612de5565b60405180910390fd5b8060000154828051906020012014610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90612d85565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663fc9539cd846040518263ffffffff1660e01b81526004016104c19190612c42565b600060405180830381600087803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b5050505060048260030160006101000a81548160ff0219169083600481111561051457fe5b021790555084600054877f4484fb3b07ac3a8795fbba0f7b144e67cfa5ccab55341b45cb97dfb862ce9d0760405160405180910390a4505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016105b29190612ba6565b602060405180830381600087803b1580156105cc57600080fd5b505af11580156105e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106049190612285565b610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90612e05565b60405180910390fd5b6000600481111561065057fe5b600a6000868152602001908152602001600020600085815260200190815260200160002060030160009054906101000a900460ff16600481111561069057fe5b14806106e65750600260048111156106a457fe5b600a6000868152602001908152602001600020600085815260200190815260200160002060030160009054906101000a900460ff1660048111156106e457fe5b145b610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90612d05565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156107665781602001602082028036833780820191505090505b508152602001600060405190808252806020026020018201604052801561079c5781602001602082028036833780820191505090505b508152602001600160048111156107af57fe5b815250600a600086815260200190815260200160002060008581526020019081526020016000206000820151816000015560208201518160010190805190602001906107fc92919061200b565b50604082015181600201908051906020019061081992919061200b565b5060608201518160030160006101000a81548160ff0219169083600481111561083e57fe5b021790555090505060016002541161089a576003600a6000868152602001908152602001600020600085815260200190815260200160002060030160006101000a81548160ff0219169083600481111561089457fe5b02179055505b33600a600086815260200190815260200160002060008581526020019081526020016000206001016000815481106108ce57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082846000547f376cd30a1281a11ef1ed8a1b3a37856953b74adf5799c9df536e2b8b11d317c9856040516109c49190612bdc565b60405180910390a450505050565b60006060806000600360000154600360020160038001600360040160009054906101000a900460ff1682805480602002602001604051908101604052809291908181526020018280548015610a7c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a32575b5050505050925081805480602002602001604051908101604052809291908181526020018280548015610b0457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aba575b50505050509150935093509350935090919293565b6009602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bce5780601f10610ba357610100808354040283529160200191610bce565b820191906000526020600020905b815481529060010190602001808311610bb157829003601f168201915b505050505081565b600b602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b600a602052816000526040600020602052806000526040600020600091509150508060000154908060030160009054906101000a900460ff16905082565b60086020528060005260406000206000915090505481565b60005481565b610c76612095565b600a600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d3457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610cea575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610dc257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d78575b505050505081526020016003820160009054906101000a900460ff166004811115610de957fe5b6004811115610df457fe5b81525050905092915050565b60025481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b8152600401610e669190612ba6565b602060405180830381600087803b158015610e8057600080fd5b505af1158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb89190612285565b610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90612e05565b60405180910390fd5b60006001811115610f0457fe5b600360040160009054906101000a900460ff166001811115610f2257fe5b14610f62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5990612e25565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fcc57600080fd5b505af1158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110049190612300565b821115611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90612d45565b60405180910390fd5b604051806080016040528083815260200160016040519080825280602002602001820160405280156110875781602001602082028036833780820191505090505b50815260200160006040519080825280602002602001820160405280156110bd5781602001602082028036833780820191505090505b5081526020016001808111156110cf57fe5b81525060036000820151816000015560208201518160020190805190602001906110fa92919061200b565b50604082015181600301908051906020019061111792919061200b565b5060608201518160040160006101000a81548160ff0219169083600181111561113c57fe5b02179055509050506001600254116111af576003600001546002819055506000600360040160006101000a81548160ff0219169083600181111561117c57fe5b0217905550817fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a25b3360036002016000815481106111c157fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550817f79a7cdf066fccb1627ec87a3dd0bf8dcb3a186313f941c8bf80ed979aa62d38d60405160405180910390a25050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b81526004016112f59190612ba6565b602060405180830381600087803b15801561130f57600080fd5b505af1158015611323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113479190612285565b611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612e05565b60405180910390fd5b6000600a600086815260200190815260200160002060008581526020019081526020016000209050600060048111156113bb57fe5b8160030160009054906101000a900460ff1660048111156113d857fe5b1415611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141090612ce5565b60405180910390fd5b6001600481111561142657fe5b8160030160009054906101000a900460ff16600481111561144357fe5b14611483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147a90612d25565b60405180910390fd5b600b6000868152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990612d65565b60405180910390fd5b600183600181111561154057fe5b60ff161115611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b90612dc5565b60405180910390fd5b60018081111561159057fe5b83600181111561159c57fe5b141561160c5780600101339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611672565b80600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600b6000878152602001908152602001600020600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002548160010180549050106117585760038160030160006101000a81548160ff0219169083600481111561171d57fe5b021790555083856000547fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a4611875565b6002546118168260020180549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117d057600080fd5b505af11580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118089190612300565b611f6690919063ffffffff16565b10156118745760028160030160006101000a81548160ff0219169083600481111561183d57fe5b021790555083856000547fd75e8425627b5396c56f246441b2a9ddc336c699256cb5fd1c1c07d55827a4fa60405160405180910390a45b5b83856000547f8bb636a89dc9b59641fa0cf3c869e9c6c7df7f5a0bac2345aaa2d5bdc598b768868560030160009054906101000a900460ff166040516118bc929190612c9a565b60405180910390a45050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663541d5548336040518263ffffffff1660e01b815260040161192b9190612ba6565b602060405180830381600087803b15801561194557600080fd5b505af1158015611959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d9190612285565b6119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b390612e05565b60405180910390fd5b6001808111156119c857fe5b600360040160009054906101000a900460ff1660018111156119e657fe5b14611a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1d90612da5565b60405180910390fd5b600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aad90612d65565b60405180910390fd5b6001826001811115611ac457fe5b60ff161115611b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aff90612e45565b60405180910390fd5b600180811115611b1457fe5b826001811115611b2057fe5b1415611b91576003600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611bf7565b60038001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001600360010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fe6124fe2b7a19e7cdd807fb16247ec258d8fb0bfde2949b023bcb0c1eea19cb182604051611c819190612c7f565b60405180910390a160025460036002018054905010611d04576003600001546002819055506000600360040160006101000a81548160ff02191690836001811115611cc857fe5b02179055506003600001547fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a2611df1565b600254611dc26003800180549050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933b46676040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611d7c57600080fd5b505af1158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db49190612300565b611f6690919063ffffffff16565b1015611df0576000600360040160006101000a81548160ff02191690836001811115611dea57fe5b02179055505b5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060086000858152602001908152602001600020600081546001019190508190559050816009600086815260200190815260200160002060008381526020019081526020016000209080519060200190611e779291906120cb565b5060008390508073ffffffffffffffffffffffffffffffffffffffff1663cb65d221868433876040518563ffffffff1660e01b8152600401611ebc9493929190612f1e565b600060405180830381600087803b158015611ed657600080fd5b505af1158015611eea573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16856000547f9a2a1e97e6d641080089aafc36750cfdef4c79f8b3ace6fa4c384fa2f047695985604051611f389190612e87565b60405180910390a45050505050565b60038060000154908060040160009054906101000a900460ff16905082565b6000611fa883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611fb0565b905092915050565b6000838311158290611ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fef9190612cc3565b60405180910390fd5b5060008385039050809150509392505050565b828054828255906000526020600020908101928215612084579160200282015b828111156120835782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061202b565b5b509050612091919061214b565b5090565b6040518060800160405280600080191681526020016060815260200160608152602001600060048111156120c557fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061210c57805160ff191683800117855561213a565b8280016001018555821561213a579182015b8281111561213957825182559160200191906001019061211e565b5b509050612147919061218e565b5090565b61218b91905b8082111561218757600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101612151565b5090565b90565b6121b091905b808211156121ac576000816000905550600101612194565b5090565b90565b6000813590506121c28161320d565b92915050565b6000815190506121d781613224565b92915050565b6000813590506121ec8161323b565b92915050565b600082601f83011261220357600080fd5b813561221661221182612f97565b612f6a565b9150808252602083016020830185838301111561223257600080fd5b61223d838284613193565b50505092915050565b60008135905061225581613252565b92915050565b60008135905061226a81613262565b92915050565b60008151905061227f81613262565b92915050565b60006020828403121561229757600080fd5b60006122a5848285016121c8565b91505092915050565b6000602082840312156122c057600080fd5b60006122ce84828501612246565b91505092915050565b6000602082840312156122e957600080fd5b60006122f78482850161225b565b91505092915050565b60006020828403121561231257600080fd5b600061232084828501612270565b91505092915050565b60008060006060848603121561233e57600080fd5b600061234c8682870161225b565b935050602061235d868287016121b3565b925050604084013567ffffffffffffffff81111561237a57600080fd5b612386868287016121f2565b9150509250925092565b600080604083850312156123a357600080fd5b60006123b18582860161225b565b92505060206123c28582860161225b565b9150509250929050565b6000806000606084860312156123e157600080fd5b60006123ef8682870161225b565b93505060206124008682870161225b565b9250506040612411868287016121b3565b9150509250925092565b6000806000806080858703121561243157600080fd5b600061243f8782880161225b565b94505060206124508782880161225b565b9350506040612461878288016121b3565b925050606085013567ffffffffffffffff81111561247e57600080fd5b61248a878288016121f2565b91505092959194509250565b6000806000606084860312156124ab57600080fd5b60006124b98682870161225b565b93505060206124ca8682870161225b565b92505060406124db868287016121dd565b9150509250925092565b6000806000606084860312156124fa57600080fd5b60006125088682870161225b565b93505060206125198682870161225b565b925050604061252a86828701612246565b9150509250925092565b6000612540838361255b565b60208301905092915050565b61255581613103565b82525050565b61256481613078565b82525050565b600061257582612fee565b61257f8185613045565b935061258a83612fd3565b8060005b838110156125bb5781516125a28882612534565b97506125ad83613027565b92505060018101905061258e565b5085935050505092915050565b60006125d382612fe3565b6125dd8185613034565b93506125e883612fc3565b8060005b838110156126195781516126008882612534565b975061260b8361301a565b9250506001810190506125ec565b5085935050505092915050565b61262f8161308a565b82525050565b61263e81613096565b82525050565b61264d81613096565b82525050565b600061265e82613004565b6126688185613056565b93506126788185602086016131a2565b612681816131d5565b840191505092915050565b600061269782612ff9565b6126a18185613056565b93506126b18185602086016131a2565b6126ba816131d5565b840191505092915050565b6126ce81613115565b82525050565b6126dd81613139565b82525050565b6126ec81613139565b82525050565b6126fb8161314b565b82525050565b61270a8161315d565b82525050565b600061271b8261300f565b6127258185613067565b93506127358185602086016131a2565b61273e816131d5565b840191505092915050565b6000612756601683613067565b91507f70726f706f73616c206973206e6f7420616374697665000000000000000000006000830152602082019050919050565b6000612796604a83613067565b91507f70726f706f73616c206973206569746865722063757272656e746c792061637460008301527f697665206f722068617320616c7265616479206265656e207061737365642f7460208301527f72616e73666572726564000000000000000000000000000000000000000000006040830152606082019050919050565b6000612822601b83613067565b91507f70726f706f73616c20686173206265656e2066696e616c697a656400000000006000830152602082019050919050565b6000612862604283613067565b91507f70726f706f7365642076616c75652063616e6e6f74206265206772656174657260008301527f207468616e2074686520746f74616c206e756d626572206f662072656c61796560208301527f72730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006128ee601983613067565b91507f72656c617965722068617320616c726561647920766f746564000000000000006000830152602082019050919050565b600061292e603183613067565b91507f70726f7669646564206461746120646f6573206e6f74206d617463682070726f60008301527f706f73616c2773206461746120686173680000000000000000000000000000006020830152604082019050919050565b6000612994601f83613067565b91507f6e6f2070726f706f73616c2069732063757272656e746c7920616374697665006000830152602082019050919050565b60006129d4600c83613067565b91507f696e76616c696420766f746500000000000000000000000000000000000000006000830152602082019050919050565b6000612a14603783613067565b91507f70726f706f73616c20776173206e6f7420706173736564206f7220686173206160008301527f6c7265616479206265656e207472616e736665727265640000000000000000006020830152604082019050919050565b6000612a7a601883613067565b91507f73656e646572206d75737420626520612072656c6179657200000000000000006000830152602082019050919050565b6000612aba601e83613067565b91507f612070726f706f73616c2069732063757272656e746c792061637469766500006000830152602082019050919050565b6000612afa601f83613067565b91507f766f7465206f7574206f662074686520766f746520656e756d2072616e6765006000830152602082019050919050565b6000608083016000830151612b456000860182612635565b5060208301518482036020860152612b5d82826125c8565b91505060408301518482036040860152612b7782826125c8565b9150506060830151612b8c60608601826126d4565b508091505092915050565b612ba0816130f9565b82525050565b6000602082019050612bbb600083018461254c565b92915050565b6000602082019050612bd66000830184612626565b92915050565b6000602082019050612bf16000830184612644565b92915050565b6000604082019050612c0c6000830185612644565b612c1960208301846126e3565b9392505050565b60006020820190508181036000830152612c3a818461268c565b905092915050565b60006020820190508181036000830152612c5c8184612653565b905092915050565b6000602082019050612c7960008301846126c5565b92915050565b6000602082019050612c946000830184612701565b92915050565b6000604082019050612caf6000830185612701565b612cbc60208301846126e3565b9392505050565b60006020820190508181036000830152612cdd8184612710565b905092915050565b60006020820190508181036000830152612cfe81612749565b9050919050565b60006020820190508181036000830152612d1e81612789565b9050919050565b60006020820190508181036000830152612d3e81612815565b9050919050565b60006020820190508181036000830152612d5e81612855565b9050919050565b60006020820190508181036000830152612d7e816128e1565b9050919050565b60006020820190508181036000830152612d9e81612921565b9050919050565b60006020820190508181036000830152612dbe81612987565b9050919050565b60006020820190508181036000830152612dde816129c7565b9050919050565b60006020820190508181036000830152612dfe81612a07565b9050919050565b60006020820190508181036000830152612e1e81612a6d565b9050919050565b60006020820190508181036000830152612e3e81612aad565b9050919050565b60006020820190508181036000830152612e5e81612aed565b9050919050565b60006020820190508181036000830152612e7f8184612b2d565b905092915050565b6000602082019050612e9c6000830184612b97565b92915050565b6000608082019050612eb76000830187612b97565b8181036020830152612ec9818661256a565b90508181036040830152612edd818561256a565b9050612eec60608301846126f2565b95945050505050565b6000604082019050612f0a6000830185612b97565b612f1760208301846126f2565b9392505050565b6000608082019050612f336000830187612b97565b612f406020830186612b97565b612f4d604083018561254c565b8181036060830152612f5f8184612653565b905095945050505050565b6000604051905081810181811067ffffffffffffffff82111715612f8d57600080fd5b8060405250919050565b600067ffffffffffffffff821115612fae57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613083826130d9565b9050919050565b60008115159050919050565b6000819050919050565b60008190506130ae826131e6565b919050565b60008190506130c1826131f3565b919050565b60008190506130d482613200565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061310e8261316f565b9050919050565b600061312082613127565b9050919050565b6000613132826130d9565b9050919050565b6000613144826130a0565b9050919050565b6000613156826130b3565b9050919050565b6000613168826130c6565b9050919050565b600061317a82613181565b9050919050565b600061318c826130d9565b9050919050565b82818337600083830152505050565b60005b838110156131c05780820151818401526020810190506131a5565b838111156131cf576000848401525b50505050565b6000601f19601f8301169050919050565b600581106131f057fe5b50565b600281106131fd57fe5b50565b6002811061320a57fe5b50565b61321681613078565b811461322157600080fd5b50565b61322d8161308a565b811461323857600080fd5b50565b61324481613096565b811461324f57600080fd5b50565b6002811061325f57600080fd5b50565b61326b816130f9565b811461327657600080fd5b5056fea26469706673582212201f4a193b518286955a60a311b73d4bc94a6cf8dd265e6cdaf64233cebfd3bd4c64736f6c63430006040033"
