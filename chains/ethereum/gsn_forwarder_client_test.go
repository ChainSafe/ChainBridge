// Copyright 2020 ChainSafe Systems
// SPDX-License-Identifier: LGPL-3.0-only

package ethereum

import (
	"math/big"
	"strings"
	"testing"

	utils "github.com/ChainSafe/ChainBridge/shared/ethereum"
	ethtest "github.com/ChainSafe/ChainBridge/shared/ethereum/testing"
	eth "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
)

// we use a modified bytecode since the original uses the chainid opcode
// which the chainsafe docker containers dont support instead we swap out
// the chainid opcode with a hardcoded value (5), compile it, and use that bytecode instead
// thus if a chainid other than 5 is used this test will fail
// See here for original Forwarder: https://github.com/opengsn/gsn/blob/bdce42a5fbd37d1abc7bd32bdbe10fc8c71dc602/packages/contracts/src/forwarder/Forwarder.sol
// And here for modified forwarder (check the registerDomainSeparator function): https://gist.github.com/yahgwai/78c753fb4c502600f620d39725407fe4
const GsnForwarderBytecode = ""

func TestCreateAndExecuteGsnForwarder(t *testing.T) {
	pl := AliceKp
	client := ethtest.NewClient(t, TestEndpoint, pl)
	client.LockNonceAndUpdate()

	chainId, err := client.Client.ChainID(client.Opts.Context)
	if err != nil {
		t.Fatal(err.Error())
	}
	if chainId.Uint64() != big.NewInt(5).Uint64() {
		t.Fatal("Chain id must be 5 because we use a modified GSNForwarder contract with a hardcode chain id. Seethe comment above the bytecode to understand why.")
	}

	forwarderAbi, err := abi.JSON(strings.NewReader(GsnForwarderAbi))
	if err != nil {
		t.Fatal(err.Error())
	}
	forwarderAddress, tx, forwarderContract, err := bind.DeployContract(client.Opts, forwarderAbi, common.FromHex(GsnForwarderBytecode), client.Client)
	if err != nil {
		t.Fatal(err.Error())
	}

	err = utils.WaitForTx(client, tx)
	if err != nil {
		t.Fatal(err.Error())
	}
	client.UnlockNonce()
	client.LockNonceAndUpdate()
	domainRegistrationPacked, err := forwarderAbi.Pack("registerDomainSeparator", "GSN Relayed Transaction", "2")
	if err != nil {
		t.Fatal(err.Error())
	}
	sendDomainTx, err := forwarderContract.RawTransact(client.Opts, domainRegistrationPacked)
	if err != nil {
		t.Fatal(err.Error())
	}
	err = utils.WaitForTx(client, sendDomainTx)
	if err != nil {
		t.Fatal(err.Error())
	}
	client.UnlockNonce()

	forwarderClient := NewGsnForwarderClient(client.Client, forwarderAddress, pl.CommonAddress(), chainId)
	nonce, err := forwarderClient.LockAndNextNonce()
	if err != nil {
		t.Fatal(err.Error())
	}

	value := big.NewInt(0)
	gas := big.NewInt(100000)

	packed, err := forwarderClient.PackAndSignForwarderArg(
		pl.CommonAddress(),
		pl.CommonAddress(),
		common.Hex2Bytes("6666"),
		nonce,
		value,
		gas,
		*pl)

	if err != nil {
		t.Fatal(err.Error())
	}

	// now make a call with the packed data
	callMsg := eth.CallMsg{
		To:    &forwarderAddress,
		Data:  packed,
		From:  pl.CommonAddress(),
		Gas:   gas.Uint64() + 100000,
		Value: value,
	}
	res, err := client.Client.CallContract(client.Opts.Context, callMsg, nil)

	if err != nil {
		t.Fatal(err.Error())
	} else {
		p, unErr := forwarderClient.forwarderAbi.Unpack("execute", res)
		if unErr != nil {
			t.Fatal(unErr.Error())
		}
		if p[0] == false {
			t.Fatal("Inner call failed")
		}
	}

	err = client.LockNonceAndUpdate()
	if err != nil {
		t.Fatal(err.Error())
	}

	onChainNonce, err := forwarderClient.GetOnChainNonce()
	if err != nil {
		t.Fatal(err.Error())
	}

	if onChainNonce.Cmp(nonce) != 0 || onChainNonce.Cmp(big.NewInt(0)) != 0 {
		t.Fatal("Invalid start nonce", onChainNonce, nonce)
	}

	// now send a transaction and check that the nonce was updated
	sendTx, err := forwarderContract.RawTransact(client.Opts, packed)
	if err != nil {
		t.Fatal(err.Error())
	}
	err = utils.WaitForTx(client, sendTx)
	if err != nil {
		t.Fatal(err.Error())
	}

	onChainNonce, err = forwarderClient.GetOnChainNonce()
	if err != nil {
		t.Fatal(err.Error())
	}
	if onChainNonce.Cmp(nonce.Add(nonce, big.NewInt(1))) != 0 || onChainNonce.Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Invalid end nonce", onChainNonce, nonce)
	}

	client.UnlockNonce()
	forwarderClient.UnlockAndSetNonce(nonce)
}
